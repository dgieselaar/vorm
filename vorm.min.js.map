{"version":3,"sources":["vorm.min.js","_.js","VormEvent.js","VormFieldCtrl.js","VormModelDelegate.js","VormValueScope.js","VormValueType.js","ngModel.js","vormChange.js","vormControl.js","vormControlList.js","vormDelegateButton.js","vormDisplay.js","vormField.js","vormFieldConfig.js","vormFieldTemplate.js","vormFieldWrapper.js","vormFieldset.js","vormFocusableList.js","vormForm.js","vormInvoke.js","vormLabel.js","vormSubmit.js","vormTemplateService.js","types/input.js","types/radio.js","types/select.js","types/textarea.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","TypeError","angular","module","factory","$document","$window","VormEvent","CustomEvent","type","data","detail","bubbles","error","event","createEvent","initCustomEvent","$rootScope","VormValueType","VormValueScope","name","element","getDefaultValue","defaults","valueType","SINGLE","LIST","NAMED","setModelValue","model","$viewChangeListeners","$modelValue","$$writeModelToScope","listeners","applyValueToControls","valueScope","models","_","each","index","modelsToChange","concat","val","key","find","$name","pull","getModelValue","pluck","handleViewChange","ctrl","triggerViewChange","handleFormatterCall","modelValue","triggerModelChange","viewChangeListeners","modelChangeListeners","prefix","required","dispatchEvent","invoke","getName","setName","arguments","addModel","$formatters","removeModel","getModels","getValue","getValueType","setValueType","indexOf","Error","setValue","setEmpty","isRequired","setRequired","r","isEmpty","every","$isEmpty","$viewValue","setValueScope","scope","$destroy","getValueScope","chain","split","map","zipObject","mapValues","m","substr","capitalize","getClassObj","forEach","capitalized","propertyName","method","outerArgs","apply","delegate","ngModel","setNgModel","unsetNgModel","getNgModel","clearViewValue","$setViewValue","$render","getViewValue","$new","constant","directive","VormFieldCtrl","require","compile","attrs","controllers","_controllers","vormField","vorm","addField","$on","removeField","$parse","link","handleChange","cb","$event","vormChange","bind","matchesFuncName","createElement","restrict","controller","$scope","$element","$attrs","vormFieldConfig","vormFocusableList","vormFieldTemplate","this","inputId","Math","random","toString","slice","invokeData","getData","getConfig","addId","getModelCompiler","clonedElement","focusable","selector","replace","$eval","replaceWith","className","querySelector","attr","getInputId","$$postDigest","getDisplayMode","getOptions","version","minor","options","nwOpts","equals","removeId","controllerAs","VormModelDelegate","triggerAsyncViewChange","callback","unwatch","$watchCollection","setFocus","id","getId","el","getElementById","focus","createDelegate","delegates","limit","NaN","$watch","getLimit","setLimit","keys","getDelegates","clearDelegate","l","Number","reachedLimit","isClearButtonVisible","handleCreateClick","handleClearClick","splice","shift","template","vormControlList","handleClick","isDisabled","isVisible","getLabel","config","typeOptions","addLabel","vormTemplateService","vormControl","compiler","display","getDisplayCompiler","append","extend","_controllers2","vormInvoke","getValues","values","vormForm","invokable","$values","invokeExpr","expr","disabled","wrapperEl","getDefaultTemplate","querySelectorAll","getDefaultControlTemplate","outerHTML","copy","label","modelTemplate","wrapped","transclude","vals","getFields","fields","field","when","ids","changeListeners","listener","getFieldByName","submitListeners","indexBy","toUpperCase","$injector","locals","last","$inject","invoker","handleSubmit","_controllers3","vormSubmit","provider","modifyModelTemplates","processor","templates","modifyDisplayTemplates","modifyTemplate","processedEl","wrapperTemplate","modifyControlTemplate","wrapper","controlTemplate","innerHTML","registerType","displayTemplate","compilers","null","$get","$compile","getCompiler","controlType","pool","modelEl","some","childEl","hasAttribute","vormTemplateServiceProvider","placeholder","includes","tpl"],"mappings":"AAAA,YAEA,IAAIA,gBAAiB,SAAUC,EAAKC,GAAK,GAAIC,MAAMC,QAAQH,GAAQ,MAAOA,EAAY,IAAII,OAAOC,WAAYC,QAAON,GAAM,CAAE,GAAIO,MAAeC,GAAK,EAAUC,GAAK,EAAWC,EAAKC,MAAW,KAAM,IAAK,GAAiCC,GAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAAoBR,EAAKS,KAAKJ,EAAGK,QAAYhB,GAAKM,EAAKW,SAAWjB,GAA3DO,GAAK,IAAoE,MAAOW,GAAOV,GAAK,EAAMC,EAAKS,EAAO,QAAU,KAAWX,GAAMK,EAAG,WAAWA,EAAG,YAAe,QAAU,GAAIJ,EAAI,KAAMC,IAAQ,MAAOH,GAAe,KAAM,IAAIa,WAAU,0DCAhgB,WAYAC,QAAAC,OAAA,cCbA,WAEAD,QAAAC,OAAA,QACAC,QAAA,aAAA,YAAA,UAAA,SAAAC,EAAAC,GAEA,GAAAC,GAAAf,MAEA,KACA,CAAA,GAAAc,GAAAE,YAAA,OACAD,EAAA,SAAAE,EAAAC,GACA,MAAA,IAAAJ,GAAAE,YAAAC,GACAE,OAAAD,EACAE,SAAA,KAGA,MAAAC,GACAN,EAAA,SAAAE,EAAAC,GACA,GAAAI,GAAAT,EAAA,GAAAU,YAAA,cAEA,OADAD,GAAAE,gBAAAP,GAAA,GAAA,EAAAC,GACAI,GAIA,MAAAP,SCvBA,WAEAL,QAAAC,OAAA,QACAC,QAAA,iBAAA,aAAA,YAAA,gBAAA,iBAAA,SAAAa,EAAAV,EAAAW,EAAAC,GAEA,MAAA,UAAAC,EAAAC,GAYA,QAAAC,KACA,GAAAC,GAAA/B,MACA,QAAAgC,GACA,IAAAN,GAAAO,OACAF,EAAA,IACA,MAEA,KAAAL,GAAAQ,KACAH,GAAA,KACA,MAEA,KAAAL,GAAAS,MACAJ,KAGA,MAAAA,GAGA,QAAAK,GAAAC,EAAA/B,GHkDI,GG/CJgC,GAAAD,EAAAC,qBAAAC,EAAAF,EAAAE,WAEAF,GAAAC,wBACAD,EAAAE,YAAAjC,EACA+B,EAAAG,sBAGAH,EAAAI,UAAAH,EACAD,EAAAE,YAAAA,EAGA,QAAAG,KACA,GAAApC,GAAAqC,EAAAf,EACA,QAAAI,GACA,IAAAN,GAAAO,OACAW,EAAA,IACAR,EAAAQ,EAAA,GAAAtC,EAEA,MAEA,KAAAoB,GAAAQ,KACAW,EAAAC,KAAAF,EAAA,SAAAP,EAAAU,GACAX,EAAAC,EAAA/B,EAAAyC,KAEA,MAEA,KAAArB,GAAAS,MACA,GAAAa,GAAAJ,EAAAK,QACAJ,GAAAC,KAAAxC,EAAA,SAAA4C,EAAAC,GACA,GAAAd,GAAAQ,EAAAO,KAAAR,GAAAS,MAAAF,GACAd,IACAD,EAAAC,EAAAa,GAEAL,EAAAS,KAAAN,EAAAX,KAGAQ,EAAAC,KAAAE,EAAA,SAAAX,GACAD,EAAAC,EAAArC,WAMA,QAAAuD,KACA,GAAAjD,GAAAN,MAEA,QAAAgC,GACA,IAAAN,GAAAO,OACA3B,EAAAsC,EAAA,GAAAA,EAAA,GAAAL,YAAAvC,MACA,MAEA,KAAA0B,GAAAQ,KACA5B,EAAAuC,EAAAW,MAAAZ,EAAA,cACA,MAEA,KAAAlB,GAAAS,MACA7B,KACAuC,EAAAC,KAAAF,EAAA,SAAAP,GACA/B,EAAA+B,EAAAgB,OAAAhB,EAAAE,cAKA,MAAAjC,GAGA,QAAAmD,KAEAd,EAAAf,GAAA2B,IACAG,EAAAC,oBAGA,QAAAC,GAAAtD,GAEA,GAAAuD,GAAAN,GAGA,OAFAZ,GAAAf,GAAAiC,EACAH,EAAAI,qBACAxD,EA5GA,GAAAoD,MACAd,KACAmB,KACAC,KACAC,EAAA,cAEAjC,EAAAN,EAAAO,OACAiC,EAAAlE,OACA2C,EAAA,GAAAhB,EAuGA+B,GAAAI,mBAAA,WACAjC,EAAAsC,cAAA,GAAApD,GAAA,eAAAa,KAAAA,KACAiB,EAAAuB,OAAAJ,EAAA,OAAA,KAAApC,IAGA8B,EAAAC,kBAAA,WACA9B,EAAAsC,cAAA,GAAApD,GAAA,cAAAa,KAAAA,KACAiB,EAAAuB,OAAAL,EAAA,OAAA,KAAAnC,IAGA8B,EAAAW,QAAA,WACA,MAAAzC,IAGA8B,EAAAY,QAAA,WACA1C,EAAA2C,UAAA,IAGAb,EAAAc,SAAA,SAAAnC,GACAO,EAAAvC,KAAAgC,GACAA,EAAAC,qBAAAjC,KAAAoD,GACApB,EAAAoC,YAAApE,KAAAuD,GACAjB,EAAAf,GAAA2B,KAGAG,EAAAgB,YAAA,SAAArC,GACAQ,EAAAS,KAAAV,EAAAP,GACAQ,EAAAS,KAAAjB,EAAAC,qBAAAmB,GACAZ,EAAAS,KAAAjB,EAAAoC,YAAAb,GACAjB,EAAAf,GAAA2B,KAGAG,EAAAiB,UAAA,WACA,MAAA/B,IAGAc,EAAAkB,SAAA,WACA,MAAAjC,GAAAf,IAGA8B,EAAAmB,aAAA,WACA,MAAA7C,IAGA0B,EAAAoB,aAAA,SAAA7D,GACA,GAAA,MAAAS,EAAAO,OAAAP,EAAAQ,KAAAR,EAAAS,OAAA4C,QAAA9D,GACA,KAAA,IAAA+D,OAAA,8BAAAtD,EAGAM,GAAAf,EACA0B,EAAAf,GAAAE,KAGA4B,EAAAuB,SAAA,SAAA3E,GACAqC,EAAAf,GAAAtB,EACAoC,KAGAgB,EAAAwB,SAAA,WACAvC,EAAAf,GAAAE,KAGA4B,EAAAyB,WAAA,WACA,MAAAjB,IAGAR,EAAA0B,YAAA,SAAAC,GACAnB,IAAAmB,GAGA3B,EAAA4B,QAAA,WACA,MAAA1C,GAAA2C,MAAA,SAAAlD,GACA,MAAAA,GAAAmD,SAAAnD,EAAAoD,eAIA/B,EAAAgC,cAAA,SAAAC,GACA,GAAAzC,GAAAP,EAAAf,EACAe,IACAA,EAAAiD,WAGAjD,EAAAgD,EACAhD,EAAAf,GAAAsB,GAGAQ,EAAAmC,cAAA,WACA,MAAAlD,GAGA,IAAAmD,GAAAjD,EAAA,gEAAAkD,MAAA,MACAC,IAAA,SAAA7C,GACA,MAAAc,GAAAd,IAEA8C,YACAC,UAAA,SAAA5F,EAAA6C,GACA,GAAAgD,GAAAhD,EAAAiD,OAAAnC,EAAA1D,OACA,OAAAmD,GAAA,KAAAb,EAAAwD,WAAAF,OAsCA,OAnCAzC,GAAA4C,YAAA,WACA,MAAAR,GAAAxF,SAGAoD,EAAAwB,WAEAxB,EAAAK,oBAAAA,EACAL,EAAAM,qBAAAA,EAEA,iDAAA+B,MAAA,KAAAQ,QAAA,SAAAtF,GACA,GAAAuF,GAAA3D,EAAAwD,WAAApF,GACAoD,EAAA,KAAAmC,EACAC,EAAA,IAAAxF,EACAqD,EAAA,MAAAkC,EACAE,EAAA,MAAA,QAAA,WAAA,aAAA3B,QAAA9D,GAAA,QAAA,MAEAyC,GAAAW,GAAA,WACA,MAAAzB,GAAA8D,GAAA,SAAArE,GACA,MAAAA,GAAAoE,MAIA,UAAAxF,GAAA,YAAAA,IACAyC,EAAAY,GAAA,WACA,GAAAqC,GAAApC,SAEA3B,GAAA2D,QAAA,SAAAlE,GACAA,EAAA,IAAAiC,GAAAsC,MAAAvE,EAAAsE,SAMAhE,EAAAf,GAAAE,IAEA4B,SC7PA,WAEAhD,QAAAC,OAAA,QACAC,QAAA,qBAAA,WAEA,MAAA,UAAAgB,GAEA,GAAAiF,MACAC,EAAA,IAgCA,OA9BAD,GAAAvG,MAAA,KAEAuG,EAAAxC,QAAA,WACA,MAAAzC,IAGAiF,EAAAE,WAAA,SAAA1E,GACAyE,EAAAzE,EACAyE,IACAA,EAAAzD,MAAAzB,IAIAiF,EAAAG,aAAA,WACAF,EAAA,MAGAD,EAAAI,WAAA,WACA,MAAAH,IAGAD,EAAAK,eAAA,WACAJ,EAAAK,cAAA,MACAL,EAAAM,WAGAP,EAAAQ,aAAA,WACA,MAAAP,GAAAA,EAAArB,WAAAoB,EAAAvG,OAGAuG,SCxCA,WAEAnG,QAAAC,OAAA,QACAC,QAAA,kBAAA,aAAA,SAAAa,GAEA,MAAA,YAEA,GAAAkE,GAAAlE,EAAA6F,MAEA,OAAA3B,UCTA,WAEAjF,QAAAC,OAAA,QACA4G,SAAA,iBACAtF,OAAA,SACAC,KAAA,OACAC,MAAA,aCNA,WAcAzB,QAAAC,OAAA,QACA6G,UAAA,WAAA,gBAAA,SAAAC,GAEA,OACAC,SAAA,UAAA,cAAA,cACAC,QAAA,WACA,MAAA,UAAAhC,EAAA9D,EAAA+F,EAAAC,GPqXK,GAAIC,GAAe1I,eOnXxByI,EAAA,GAAAf,EAAAgB,EAAA,GAAAC,EAAAD,EAAA,GAAAE,EAAAF,EAAA,IAEAC,GAAAC,KAEAD,IACAA,EAAA,GAAAN,GAAAG,EAAAhG,MAAAgG,EAAAd,QAAAjF,EAAA,IAEAmG,IACAA,EAAAC,SAAAF,GACApC,EAAAuC,IAAA,WAAA,WACAF,EAAAG,YAAAJ,OAKAA,EAAAvD,SAAAsC,GAEAnB,EAAAuC,IAAA,WAAA,WACAH,EAAArD,YAAAoC,eCxCA,WAaApG,QAAAC,OAAA,QACA6G,UAAA,cAAA,SAAA,SAAAY,GAEA,OACAC,KAAA,SAAA1C,EAAA9D,EAAA+F,GAIA,QAAAU,GAAAhH,EAAAM,GACA2G,EAAA5C,GACA6C,OAAAlH,EACA+B,MAAA/B,EAAAH,OAAAG,EAAAH,OAAAS,KAAAA,IALA,GAAA2G,GAAAH,EAAAR,EAAAa,WASA5G,GAAA6G,KAAA,aAAAJ,WC5BA,WAEA5H,QAAAC,OAAA,QACA6G,UAAA,eAAA,YAAA,SAAA3G,GAEA,GAAA8H,GAAA,WAEA,GAAA9G,GAAAhB,EAAA,GAAA+H,cAAA,MAEA,OAAA/F,IAAA,GAAA,KAAA,MAAA,WACAmD,IAAA,SAAA/B,GACA,MAAAA,GAAAA,EAAA,kBAAA,YAEAb,KAAA,SAAAxB,GACA,MAAAA,KAAAC,OAKA,QACAgH,SAAA,IACAnB,SAAA,cAAA,aAAA,mBAAA,qBAAA,sBACAoB,YAAA,SAAA,WAAA,SAAA,SAAAC,EAAAC,EAAAC,GAEA,GACAlB,GACAmB,EACAC,EACAC,EAJA1F,EAAA2F,KAKAC,EAAAC,KAAAC,SAAAC,SAAA,IAAAC,MAAA,EAEAhG,GAAA2E,KAAA,SAAAR,GACAE,EAAAF,EAAA,GACAqB,EAAArB,EAAA,GACAsB,EAAAtB,EAAA,GACAuB,EAAAvB,EAAA,GAEAnE,EAAAiG,WAAAT,EAAAS,WACAjG,EAAAkG,QAAAV,EAAAU,QACAlG,EAAAmG,UAAAX,EAAAW,UAEAV,EAAAW,MAAAR,GAEAF,EAAAW,mBAAAhB,EAAA,SAAAiB,GAEA,GAAAC,GAAAjK,OACAkK,EAAA,qDACAC,EAAAnB,EAAA5F,KAAA,wBACAyD,EAAAkC,EAAAqB,MAAAnB,EAAApC,SAEAsD,GAAAE,YAAAL,GAEAA,EAAA,GAAAM,WAAA,IAAAH,EAAA,GAAAG,UAGAL,EADAD,EAAA,GAAArB,GAAAuB,GACAF,EAEAtJ,QAAAmB,QAAAmI,EAAA,GAAAO,cAAAL,IAGAD,EAAAO,KAAA,KAAA9G,EAAA+G,cAEA1B,EAAA2B,aAAA,WACA7D,EAAAE,WAAAiD,EAAAlB,WAAA,cAGAC,EAAAb,IAAA,WAAA,WACArB,EAAAG,oBAKAtD,EAAAyB,WAAA,WACA,MAAA4C,IAAAA,EAAA5C,cAGAzB,EAAA+G,WAAA,WACA,MAAAnB,IAGA5F,EAAA2D,aAAA,WACA,MAAA0B,GAAAqB,MAAAnB,EAAApC,UAAAQ,gBAGA3D,EAAAiH,eAAA,WACA,MAAAzB,GAAAyB,kBAOAjH,EAAAkH,WAJAlK,QAAAmK,QAAAC,OAAA,EAIA,WACA,MAAApH,GAAAiG,WAAA,YAGA,WAEA,GAAAoB,GAAA/K,MAEA,OAAA,YACA,GAAAgL,GAAAtH,EAAAiG,WAAA,UAKA,OAJAoB,KAAAC,GAAAtK,QAAAuK,OAAAF,EAAAC,KACAD,EAAAC,GAGAD,MAKAhC,EAAAb,IAAA,WAAA,WACAiB,EAAA+B,SAAA5B,OAIA6B,aAAA,cACA9C,KAAA,SAAA1C,EAAA9D,EAAA+F,EAAAC,GACAA,EAAA,GAAAQ,KAAAR,EAAA6B,MAAA,YCtHA,WAaAhJ,QAAAC,OAAA,QACA6G,UAAA,mBAAA,oBAAA,YAAA,SAAA4D,EAAAvK,GAEA,OACA6G,SAAA,kBAAA,mBAAA,sBAAA,cACAmB,SAAA,IACAC,YAAA,SAAA,SAAAC,GASA,QAAAsC,GAAAC,GACA,GAAAC,GAAAxC,EAAAyC,iBAAAzD,EAAApD,UAAA,WAEAoD,EAAApE,oBAEA2H,IAEAC,MAIA,QAAAE,KACA,GAAAtC,EAAA,CACA,GAAAuC,GAAAvC,EAAAwC,QACAC,EAAA/K,EAAA,GAAAgL,eAAAH,EAEAE,IACAA,EAAAE,SAKA,QAAAC,GAAAnK,GACA,GAAAiF,GAAA7G,OACAM,EAAAN,MAIA,QAFA6G,EAAA,GAAAuE,GAAAxJ,GAEAmG,EAAAlD,gBACA,IAAA,OACAvE,EAAAyH,EAAAnD,WAAAoH,EAAAzL,OACA,MAEA,KAAA,QACAD,EAAAyH,EAAAnD,WAAAhD,EACA,MAEA,KAAA,SACAtB,EAAAyH,EAAAnD,WAIAiC,EAAAvG,MAAAA,EACA0L,EAAA3L,KAAAwG,GAlDA,GAAAnD,GAAA2F,KACA2C,KACAC,EAAAC,EAAAA,EACAhD,EAAAlJ,OACAmJ,EAAAnJ,OACA+H,EAAA/H,MAgDA0D,GAAA2E,KAAA,SAAAR,GAEAqB,EAAArB,EAAA,GACAsB,EAAAtB,EAAA,GACAE,EAAAF,EAAA,GAEAkB,EAAAoD,OAAAjD,EAAAkD,SAAA,SAAAH,GACAvI,EAAA2I,SAAAJ,KAGAlD,EAAAyC,iBAAA,WACA,GAAAc,GAAAtM,OACAkD,EAAA6E,EAAAnD,UAEA,QAAAmD,EAAAlD,gBACA,QACAyH,EAAAzJ,EAAAyJ,KAAApJ,EACA,MAEA,KAAA,SACAoJ,EAAA,KAIA,MAAAA,IACA,SAAAA,GAEAN,KAEAM,GACAP,IAGAlJ,EAAAC,KAAAwJ,EAAA,SAAAnJ,GACA4I,EAAA5I,QAOAO,EAAA6I,aAAA,WACA,MAAAP,IAGAtI,EAAA8I,cAAA,SAAA3F,GACAA,EAAAK,kBAGAxD,EAAA0I,SAAA,WACA,MAAAH,IAGAvI,EAAA2I,SAAA,SAAAI,GACAR,EAAAS,OAAAD,IAGA/I,EAAAiJ,aAAA,WACA,MAAAV,GAAA,GAAAD,EAAAzL,QAAA0L,GAGAvI,EAAAkJ,qBAAA,WACA,MAAA,SAAA7E,EAAAlD,gBAGAnB,EAAAmJ,kBAAA,WACA9E,EAAA9C,SAAA8C,EAAAnD,WAAA3B,OAAA,OACAoI,EAAAI,IAGA/H,EAAAoJ,iBAAA,SAAAjG,GAEA,GAAA,IAAAmF,EAAAzL,OACAsG,EAAAK,qBACA,CACA,GAAA5G,GAAAyH,EAAAnD,WACA7B,EAAAF,EAAAO,KAAA2E,EAAApD,aAAAtC,MAAAwE,EAAAI,cAEA3G,GAAAyM,OAAAhK,EAAA,GACAgF,EAAA9C,SAAA3E,GAEA+K,EAAAI,OAKAN,aAAA,kBACA9C,KAAA,SAAA1C,EAAA9D,EAAA+F,EAAAC,GAEAA,EAAAmF,QAAA3E,KAAAR,WCnKA,WAEAnH,QAAAC,OAAA,QACA6G,UAAA,sBAAA,WAEA,OACAE,SAAA,qBAAA,mBAAA,mBAAA,cACAuF,SACA,mOAGA9C,SAAA,EACArB,YAAA,WAEA,GAAApF,GAAA2F,KACAH,EAAAlJ,OACAkN,EAAAlN,OACA+H,EAAA/H,MAEA0D,GAAA2E,KAAA,SAAAR,GACAqB,EAAArB,EAAA,GACAqF,EAAArF,EAAA,GACAE,EAAAF,EAAA,IAGAnE,EAAAyJ,YAAA,WACAD,EAAAL,qBAGAnJ,EAAA0J,WAAA,WACA,MAAAF,GAAAP,gBAGAjJ,EAAA2J,UAAA,WACA,MAAA,SAAAtF,EAAAlD,gBAGAnB,EAAA4J,SAAA,WACA,GAAAC,GAAArE,EAAAW,YACA2D,EAAAD,EAAAA,EAAAvL,UAAA,KACAyL,EAAAD,GAAAA,EAAAC,SAAAvE,EAAA9E,OAAAoJ,EAAAC,UAAA,EAEA,OAAAA,MAIApF,KAAA,SAAA1C,EAAA9D,EAAA+F,EAAAC,GAEAA,EAAAmF,QAAA3E,KAAAR,IAGAsD,aAAA,4BCnDA,WAEAzK,QAAAC,OAAA,QACA6G,UAAA,eAAA,sBAAA,SAAAkG,GAEA,OACA7E,SAAA,IACAnB,SAAA,cAAA,eAAA,oBACAoB,YAAA,SAAA,WAAA,SAAAC,EAAAC,GAEA,GAAAtF,GAAA2F,KACAsE,EAAA3N,OACAkJ,EAAAlJ,MAEA0D,GAAA2E,KAAA,SAAAR,GAEA,GAAAoF,GAAAjN,OACA4N,EAAA5N,OACAuN,EAAAvN,MAEA2N,GAAA9F,EAAA,GACAqB,EAAArB,EAAA,GAEA0F,EAAArE,EAAAW,YAEAoD,EAAAM,EAAAN,SAAAM,EAAAN,SAAAY,QAAA,KAEAD,EAAAF,EAAAI,mBAAAP,EAAAtM,KAAAgM,GAEAW,EAAA7E,EAAA,SAAAiB,GACAhB,EAAA+E,OAAA/D,KAGAtG,EAAA2D,aAAAsG,EAAAtG,aACA3D,EAAAH,cAAAoK,EAAApK,iBAKA4H,aAAA,cACA9C,KAAA,SAAA1C,EAAA9D,EAAA+F,EAAAC,GACAA,EAAAmF,QAAA3E,KAAAR,WCzCA,WAEAnH,QAAAC,OAAA,QACA6G,UAAA,aAAA,gBAAA,SAAAC,GAEA,OACA9B,OAAA,EACA+B,SAAA,YAAA,cACAoB,YAAA,SAAA,WAAA,SAAA,SAAAC,EAAAC,EAAAC,GAEA,GAAArH,GAAAmH,EAAAqB,MAAAnB,EAAAlB,YAAAkB,EAAArH,MAAAqH,EAAAnC,QACApD,EAAA2F,IAEA3I,SAAAsN,OAAAtK,EAAA,GAAA+D,GAAA7F,EAAAoH,EAAA,KAEAtF,EAAA2E,KAAA,SAAAR,Gby0BK,GAAIoG,GAAgB7O,eax0BzByI,EAAA,GAAAG,EAAAiG,EAAA,EAEAjG,KACAA,EAAAC,SAAAvE,GACAqF,EAAAb,IAAA,WAAA,WACAF,EAAAG,YAAAzE,SAMAyH,aAAA,YACA9C,KAAA,SAAA1C,EAAA9D,EAAA+F,EAAAC,GACAA,EAAAmF,QAAA3E,KAAAR,WC7BA,WAEAnH,QAAAC,OAAA,QACA6G,UAAA,mBAAA,aAAA,SAAA0G,GAEA,OACAxG,SAAA,kBAAA,YAAA,cACAoB,YAAA,SAAA,SAAA,SAAAC,EAAAE,GAOA,QAAAkF,KACA,GAAAC,GAAApO,MAQA,OANAqO,GACAD,EAAAC,EAAAF,YACApG,IACAqG,KACAA,EAAArG,EAAA1D,WAAA0D,EAAAnD,YAEAwJ,EAdA,GAAA1K,GAAA2F,KACAkE,EAAAxE,EAAAqB,MAAAnB,EAAAC,iBACAnB,EAAA/H,OACAqO,EAAArO,MAcA0D,GAAA2E,KAAA,SAAAR,GACAE,EAAAF,EAAA,GACAwG,EAAAxG,EAAA,GAEAE,EAAAzD,QAAAiJ,EAAA3L,MAEA5B,SAAAuN,EAAAvL,YACA,gBAAAuL,GAAAvL,UACA+F,EAAAjD,aAAAyI,EAAAvL,WACAhC,SAAAuN,EAAAvL,UAAAf,MACA8G,EAAAjD,aAAAyI,EAAAvL,UAAAf,OAIA4B,EAAArD,QAAA+N,EAAArJ,WAAA,kBAAAqJ,GAAArJ,SACA6E,EAAAoD,OAAA,WACA,MAAAzI,GAAAU,OAAAmJ,EAAArJ,WACA,SAAAiB,GACA4C,EAAA3C,cAAAD,KAGA4C,EAAA3C,YAAAmI,EAAArJ,WAAA,GAGAqJ,EAAAxL,UACAgG,EAAA9C,SAAAvB,EAAAU,OAAAmJ,EAAAxL,YAIA2B,EAAAU,OAAA,SAAAkK,GACA,MAAAJ,GAAAI,GACAC,QAAAJ,OAIAzK,EAAA8K,WAAA,SAAAF,GACA,MAAAJ,GAAAO,KAAAH,GACAC,QAAAJ,KACApG,EAAAlC,kBAGAnC,EAAAmG,UAAA,WACA,MAAA0D,IAGA7J,EAAAiG,WAAA,SAAAxG,GACA,MAAAO,GAAAU,OAAAmJ,EAAArM,KAAAiC,KAGAO,EAAA0I,SAAA,WACA,GAAAH,GAAA,CAWA,OATA,SAAAlE,EAAAlD,iBACAoH,EAAA,GAEAsB,EAAAvL,WAAAhC,SAAAuN,EAAAvL,UAAAiK,QACAA,EAAAvI,EAAAU,OAAAmJ,EAAAvL,UAAAiK,SAKAA,GAGAvI,EAAAiH,eAAA,WACA,MAAAjH,GAAA8K,WAAAjB,EAAAmB,UAAA,UAAA,UAIAvD,aAAA,kBACA9C,KAAA,SAAA1C,EAAA9D,EAAA+F,EAAAC,GACAA,EAAAmF,QAAA3E,KAAAR,WCjGA,WAEAnH,QAAAC,OAAA,QACA6G,UAAA,qBAAA,sBAAA,SAAAkG,GAEA,GAAAiB,GAAAjO,QAAAmB,QAAA6L,EAAAkB,qBAEAlO,SAAAmB,QAAA8M,EAAA,GAAAE,iBAAA,iBAAAxE,YAAAqD,EAAAoB,6BAEAH,EAAAnE,KAAA,oBAAA,iCACAmE,EAAAnE,KAAA,sBAAA,GAEA,IAAAyC,GAAA0B,EAAA,GAAAI,SAEA,QACApJ,OAAA,EACAkD,SAAA,IACAoE,SAAAA,EACA9C,SAAA,EACArB,YAAA,SAAA,SAAA,WAAA,SAAAC,EAAAE,EAAAD,GAEA,GAAAtF,GAAA2F,KACAkE,EAAAxE,EAAAqB,MAAAnB,EAAAsE,YACAK,EAAA5N,MAWA,IATAuN,EAAA1K,EAAAd,SAAArB,QAAAsO,KAAAzB,IACA3L,KAAAqH,EAAArH,KACAX,KAAAgI,EAAAhI,KACAgO,MAAAhG,EAAAgG,MACAhC,SAAAlE,EAAAqB,MAAAnB,EAAAgE,UACA/I,SAAA6E,EAAAqB,MAAAnB,EAAA/E,UACAhD,KAAA6H,EAAAqB,MAAAnB,EAAA/H,aAGAqM,EAAA3L,OAAA2L,EAAAtM,KACA,KAAA,IAAA+D,OAAA,iDAGA4I,GAAAF,EAAA3D,iBAAAwD,EAAAtM,KAAAsM,EAAA2B,eAEAlG,EAAAwB,KAAA,aAAA+C,EAAA3L,MAEA8B,EAAAmG,UAAA,WACA,MAAA0D,IAGA7J,EAAAqG,iBAAA,WACA,MAAA6D,MAIAzC,aAAA,2BCnDA,WAEAzK,QAAAC,OAAA,QACA6G,UAAA,oBAAA,sBAAA,SAAAkG,GAEA,GAAAyB,GAAAzO,QAAAmB,QAAA6L,EAAAkB,qBAEAO,GAAA/L,KAAA,gBAAA2K,OAAA,mCACAoB,EAAA3E,KAAA,oBAAA,gCACA2E,EAAA3E,KAAA,sBAAA,GAEA,IAAAyC,GAAAkC,EAAA,GAAAJ,SAEA,QACAlG,SAAA,IACAuG,YAAA,EACAnC,SAAAA,EACA9C,SAAA,EACArB,YAAA,SAAA,SAAAG,GAEA,GAAAvF,GAAA2F,KACAkE,GACA3L,KAAAqH,EAAArH,KACAqN,MAAAhG,EAAAgG,MAGAvL,GAAAmG,UAAA,WACA,MAAA0D,MAIApC,aAAA,0BC/BA,WAEAzK,QAAAC,OAAA,QACA6G,UAAA,gBAAA,aAAA,SAAA0G,GAEA,OACArF,SAAA,IACAnB,SAAA,eAAA,cACAuF,SAAA,0MAMA9C,SAAA,EACArB,YAAA,SAAA,SAAA,SAAAC,EAAAE,GAMA,QAAAkF,KACA,GAAAkB,KAKA,OAHAhB,KACAgB,EAAAhB,EAAAF,aAEAkB,EAVA,GAAA3L,GAAA2F,KACAgF,EAAArO,OACA2C,EAAA3C,MAWA0D,GAAA2E,KAAA,SAAAR,GACAwG,EAAAxG,EAAA,GACAwG,IACA1L,EAAA0L,EAAAxI,kBAIAnC,EAAA4L,UAAA,WACA,MAAAvG,GAAAqB,MAAAnB,EAAAsG,SAGA7L,EAAA2J,UAAA,SAAAmC,GACA,MAAA,QAAAA,EAAAC,MAAAzP,SAAAwP,EAAAC,MAAA,IAAAvB,EAAAO,KAAAe,EAAAC,MAAAlB,QAAAJ,KAAAxL,MAIAwI,aAAA,eACA9C,KAAA,SAAA1C,EAAA9D,EAAA+F,EAAAC,GACAA,EAAAmF,QAAA3E,KAAAR,WChDA,WAEAnH,QAAAC,OAAA,QACA6G,UAAA,qBAAA,WAEA,OACAsB,YAAA,WAEA,GAAApF,GAAA2F,KACAqG,IAEAhM,GAAAoG,MAAA,SAAA4B,GACAgE,EAAArP,KAAAqL,IAGAhI,EAAAwH,SAAA,SAAAQ,GACA7I,EAAAS,KAAAoM,EAAAhE,IAGAhI,EAAAiI,MAAA,WACA,MAAA+D,GAAAA,EAAAnP,OAAA,aCpBA,WAEAG,QAAAC,OAAA,QACA6G,UAAA,YAAA,iBAAA,SAAA7F,GAEA,OACAgE,OAAA,EACA+B,SAAA,QACAoB,YAAA,WAAA,SAAAE,GAQA,QAAAV,KACA,GAAA3B,GAAApC,SAEA1B,GAAAC,KAAA6M,EAAA,SAAAC,GACAA,EAAAhJ,MAAAlD,EAAAiD,KAIA,QAAAkJ,GAAAjO,GACA,MAAAiB,GAAAO,KAAAmM,EAAA,SAAAC,GACA,MAAAA,GAAAnL,YAAAzC,IAhBA,GAAA8B,GAAA2F,KACAkG,KACAI,KACAG,KACAnN,EAAA,GAAAhB,EAsFA,OAtEA+B,GAAAuE,SAAA,SAAAuH,GACAD,EAAAlP,KAAAmP,GACAA,EAAAzL,oBAAA1D,KAAAiI,GACAkH,EAAA9J,cAAA/C,IAGAe,EAAAyE,YAAA,SAAAqH,GACA3M,EAAAS,KAAAiM,EAAAC,GACA3M,EAAAS,KAAAkM,EAAAzL,oBAAAuE,IAGA5E,EAAA4L,UAAA,WACA,MAAAC,IAGA7L,EAAAyK,UAAA,WACA,GAAAC,GAAAvL,EAAA0M,GACAQ,QAAA,SAAAP,GACA,MAAAA,GAAAnL,YAEA6B,UAAA,SAAAsJ,GACA,MAAAA,GAAA5K,aAEAtE,OAEA,OAAA8N,IAGA1K,EAAAkB,SAAA,SAAAhD,GACA,MAAAiO,GAAAjO,GAAAgD,YAGAlB,EAAAuB,SAAA,SAAArD,EAAAtB,GACAuP,EAAAjO,GAAAqD,SAAA3E,IAGAoD,EAAAmC,cAAA,WACA,MAAAlD,IAGAe,EAAAiM,gBAAAA,EACAjM,EAAAoM,gBAAAA,EAEA,iDAAA/J,MAAA,KAAAQ,QAAA,SAAAtF,GACA,GAAAuF,GAAAvF,EAAAmF,OAAA,EAAA,GAAA4J,cAAA/O,EAAAmF,OAAA,GACA/B,EAAA,KAAAmC,EACAlC,EAAA,MAAAkC,EACAE,EAAA,MAAA,QAAA,WAAA,aAAA3B,QAAA9D,GAAA,QAAA,MAEAyC,GAAAW,GAAA,WACA,MAAAkL,GAAA7I,GAAA,SAAA8I,GACA,MAAAA,GAAAnL,QAIA,UAAApD,GAAA,YAAAA,IACAyC,EAAAY,GAAA,WACA,GAAAqC,GAAApC,SAEAgL,GAAAhJ,QAAA,SAAAiJ,GACAA,EAAAlL,GAAAsC,MAAA4I,EAAA7I,SAMAqC,EAAAN,KAAA,SAAA,WACA7F,EAAAuB,OAAA0L,EAAA,OAAA,KAAApM,EAAAyK,eAGAzK,IAGAyH,aAAA,kBCvGA,WAEAzK,QAAAC,OAAA,QACAC,QAAA,cAAA,YAAA,SAAA,SAAAqP,EAAA7H,GAEA,QAAAhE,GAAAkK,EAAA4B,GACA,GAAA5P,GAAAN,MAEA,OAAAsO,GAKAhO,EADAuC,EAAArD,QAAA8O,IAAA,kBAAAzL,GAAAsN,KAAA7B,IAAAtO,SAAAsO,EAAA8B,QACAH,EAAA7L,OAAAkK,EAAA,KAAA4B,EAAAxP,QAAAsO,KAAAkB,GAAA,MACA,kBAAA5B,GACAA,IAEAA,EARAA,EAcA,GAAA+B,GAAA,SAAA/B,EAAA4B,GACA,MAAA9L,GAAAkK,EAAA4B,GAaA,OAVAG,GAAA5B,KAAA,SAAAH,EAAA4B,EAAAvK,GACA,GAAArF,GAAAN,MAMA,OAJAM,GADA,gBAAAgO,GACAlG,EAAAkG,GAAA3I,EAAAuK,GAEA9L,EAAAkK,EAAA4B,IAKAG,QCrCA,WAEA3P,QAAAC,OAAA,QACA6G,UAAA,aAAA,WAEA,OACAE,SAAA,YAAA,mBAAA,sBACAuF,SAAA,mEACA9C,SAAA,EACArB,YAAA,SAAA,WAAA,SAAAC,EAAAC,GAEA,GAAAtF,GAAA2F,KACAH,EAAAlJ,OACAmJ,EAAAnJ,MAEA0D,GAAA2E,KAAA,SAAAR,GACAqB,EAAArB,EAAA,GACAsB,EAAAtB,EAAA,GAEAkB,EAAAoD,OAAAhD,EAAAwC,MAAA,SAAArC,GACAN,EAAAwB,KAAA,MAAAlB,MAIA5F,EAAA4J,SAAA,WACA,MAAApE,GAAA9E,OAAA8E,EAAAW,YAAAoF,UAIA9D,aAAA,YACA9C,KAAA,SAAA1C,EAAA9D,EAAA+F,EAAAC,GAEAA,EAAA,GAAAQ,KAAAR,EAAA6B,MAAA,YChCA,WAEAhJ,QAAAC,OAAA,QACA6G,UAAA,cAAA,SAAA,SAAAY,GAEA,OACAV,SAAA,YACAW,KAAA,SAAA1C,EAAA9D,EAAA+F,EAAAC,GAKA,QAAAyI,KACA/H,EAAA5C,GACA4I,QAAAvG,EAAAmG,ctBuyCI,GAAIoC,GAAgBnR,esB5yCxByI,EAAA,GAAAG,EAAAuI,EAAA,GACAhI,EAAAvI,MAQAuI,GAAAH,EAAAR,EAAA4I,YAEA3O,EAAA6G,KAAA,SAAA4H,WCpBA,WAEA5P,QAAAC,OAAA,QACA8P,SAAA,uBAAA,WA4BA,QAAAC,GAAAC,GACAC,EAAAvO,MAAAQ,EAAAqD,UAAA0K,EAAAvO,MAAA,SAAA4K,EAAAhM,GACA,MAAA0P,GAAA1D,EAAAhM,KAIA,QAAA4P,GAAAF,GACAC,EAAA/C,QAAAhL,EAAAqD,UAAA0K,EAAA/C,QAAA,SAAAZ,EAAAhM,GACA,MAAA0P,GAAA1D,EAAAhM,KAIA,QAAA6P,GAAAH,GACA,GAAAI,GAAAJ,EAAAjQ,QAAAmB,QAAAmP,GACAD,GAAAvG,KAAA,aAAA,IAEAuG,EAAA3N,KAAA,gBAAAoH,KAAA,QAAA,8BAEAwG,EAAAD,EAAA,GAAAhC,UAGA,QAAAkC,GAAAN,GACA,GAAAO,GAAAxQ,QAAAmB,QAAA,UACAqP,GAAAnD,OAAA4C,EAAAjQ,QAAAmB,QAAAsP,KACAA,EAAAD,EAAA,GAAAE,UAGA,QAAAC,GAAApQ,EAAAiO,EAAAoC,GACAV,EAAAvO,MAAApB,GAAAiO,EACAoC,IACAV,EAAA/C,QAAA5M,GAAAqQ,GAxDA,GAAAN,GAAAhR,OACAmR,EAAAnR,OACAuR,GAAAlP,SAAAwL,YACA+C,GAAAvO,SAAAwL,SAAA2D,OAAA9Q,QAAAmB,QAAA,iDAEA6L,IAgEA,OA9DAsD,GACA,uGAKAG,EACA,gjBA8CAL,EAAA,WACA,MAAApQ,SAAAmB,QAAAmP,KAGAC,EAAA,WACA,MAAAvQ,SAAAmB,QAAAsP,MAKAM,MAAA,WAAA,SAAAC,GAEA,QAAAC,GAAA1Q,EAAA2Q,EAAA3E,GACA,GAAAW,GAAA5N,OACA6R,EAAAN,EAAAtQ,EAYA,IATA2M,EADAX,EACAyE,EAAAzE,GAEA4E,EAAAD,GAGAhE,GAAA,YAAA3M,IACA2M,EAAA+D,EAAA1Q,EAAA,QAGA2M,EACA,KAAA,IAAA5I,OAAA,GAAAnC,EAAAwD,WAAApF,GAAA,iBAAA2Q,EAAA,aAGA,OAAAhE,GAmDA,MAhDAF,GAAAkB,mBAAA,WACA,MAAAoC,IAGAtD,EAAAoB,0BAAA,WACA,MAAAqC,IAGAzD,EAAA3D,iBAAA,SAAA9I,EAAAgM,GACA,MAAA0E,GAAA,QAAA1Q,EAAAgM,IAGAS,EAAAI,mBAAA,SAAA7M,EAAAgM,GACA,MAAA0E,GAAA,UAAA1Q,EAAAgM,IAGAsE,EAAAlP,MAAAQ,EAAAqD,UAAA0K,EAAAvO,MAAA,SAAAuJ,GACA,GAAAkG,GAAA9R,MAwBA,OAtBA6C,GAAAkP,KAAAnG,EAAA,SAAA/J,GAEA,GAAAmQ,GAAAhS,MAQA,OANA6B,GAAAoQ,aAAA,YACAH,EAAApR,QAAAmB,QAAAA,IACAmQ,EAAAnQ,EAAA0I,cAAA,iBACAuH,EAAApR,QAAAmB,QAAAmQ,MAGAF,IAIAA,IACAA,EAAAlG,GAGAkG,EAAAtH,KAAA,WAAA,kBACAsH,EAAAtH,KAAA,OAAA,0BACAsH,EAAAtH,KAAA,cAAA,4BAEAkH,EAAA9F,KAGA2F,EAAA1D,QAAAhL,EAAAqD,UAAA0K,EAAA/C,QAAA,SAAAjC,GACA,MAAA8F,GAAA9F,KAGA8B,IAGAgD,qBAAAA,EACAG,uBAAAA,EACAI,sBAAAA,EACAH,eAAAA,EACAO,aAAAA,SCzJA,WAEA3Q,QAAAC,OAAA,QACA4M,QAAA,8BAAA,SAAA2E,GAEA,GAAAtB,GACA/N,EAAA,kGAAAkD,MAAA,MACAE,YACAC,UAAA,SAAA5F,EAAA6C,GACA,GAAAgP,GAAAtP,EAAAuP,SAAA,4CAAArM,MAAA,KAAA5C,GAAA,4DAEA,GACAkP,EAAA,gBAAAlP,EAAA,KAAAgP,EAAA,aASA,OAPA,aAAAhP,IACAkP,EACA,6CACAA,EACA,uDAGAA,IAEA/R,OAEA,KAAA,GAAAW,KAAA2P,GACAsB,EAAAb,aAAApQ,EAAAP,QAAAmB,QAAA+O,EAAA3P,WC1BA,WAEAP,QAAAC,OAAA,QACA4M,QAAA,8BAAA,SAAA2E,GAEA,GAAAtG,GAAAlL,QAAAmB,QACA,iNAQAqQ,GAAAb,aAAA,QAAAzF,SCdA,WAEAlL,QAAAC,OAAA,QACA4M,QAAA,8BAAA,SAAA2E,GAEA,GAAAtG,GAAAlL,QAAAmB,QAAA,wOAEAqQ,GAAAb,aAAA,SAAAzF,SCPA,WAEAlL,QAAAC,OAAA,QACA4M,QAAA,8BAAA,SAAA2E,GAEA,GAAAtG,GAAAlL,QAAAmB,QAAA,kFAEAqQ,GAAAb,aAAA,WAAAzF","file":"vorm.min.js","sourcesContent":[null,"/*global require*/\n \n(function ( ) {\n\t\n\t/**\n\t * @ngdoc module\n\t * @name vorm\n\t * @module vorm\n\t * @description\n\t \n\t * The `vorm` module is the core and currently only module for vorm.\n\t *\n\t */\n\t\n\tangular.module('vorm', []);\n\t\n})();\n","/*global angular*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.factory('VormEvent', [ '$document', '$window', function ( $document, $window ) {\n\t\t\t\n\t\t\tlet VormEvent;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tconst event = new $window.CustomEvent('foo'); // jshint ignore:line\n\t\t\t\tVormEvent = function ( type, data ) {\n\t\t\t\t\treturn new $window.CustomEvent(type, {\n\t\t\t\t\t\tdetail: data,\n\t\t\t\t\t\tbubbles: true\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t} catch ( error ) {\n\t\t\t\tVormEvent = function ( type, data ) {\n\t\t\t\t\tconst event = $document[0].createEvent('CustomEvent');\n\t\t\t\t\tevent.initCustomEvent(type, true, true, data);\n\t\t\t\t\treturn event;\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\treturn VormEvent;\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular,_*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.factory('VormFieldCtrl', [ '$rootScope', 'VormEvent', 'VormValueType', 'VormValueScope', function ( $rootScope, VormEvent, VormValueType, VormValueScope ) {\n\t\t\t\n\t\t\treturn function ( name, element ) {\n\t\t\t\t\n\t\t\t\tconst ctrl = {},\n\t\t\t\t\tmodels = [],\n\t\t\t\t\tviewChangeListeners = [],\n\t\t\t\t\tmodelChangeListeners = [],\n\t\t\t\t\tprefix = 'vorm-field-';\n\t\t\t\t\n\t\t\t\tlet valueType = VormValueType.SINGLE,\n\t\t\t\t\trequired,\n\t\t\t\t\tvalueScope = new VormValueScope();\n\t\t\t\t\n\t\t\t\tfunction getDefaultValue ( ) {\n\t\t\t\t\tlet defaults;\n\t\t\t\t\tswitch(valueType) {\n\t\t\t\t\t\tcase VormValueType.SINGLE:\n\t\t\t\t\t\tdefaults = null;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcase VormValueType.LIST:\n\t\t\t\t\t\tdefaults = [ null ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcase VormValueType.NAMED:\n\t\t\t\t\t\tdefaults = {};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\treturn defaults;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction setModelValue ( model, value ) {\n\t\t\t\t\t// $$writeModelToScope calls the view listeners\n\t\t\t\t\t// and we don't really want that\n\t\t\t\t\tconst { $viewChangeListeners, $modelValue } = model;\n\t\t\t\t\t\t\n\t\t\t\t\tmodel.$viewChangeListeners = [];\n\t\t\t\t\tmodel.$modelValue = value;\n\t\t\t\t\tmodel.$$writeModelToScope();\n\t\t\t\t\t\n\t\t\t\t\t// reset all the things\n\t\t\t\t\tmodel.listeners = $viewChangeListeners;\n\t\t\t\t\tmodel.$modelValue = $modelValue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction applyValueToControls ( ) {\n\t\t\t\t\tvar value = valueScope[name];\n\t\t\t\t\tswitch(valueType) {\n\t\t\t\t\t\tcase VormValueType.SINGLE:\n\t\t\t\t\t\tif(models[0]) {\n\t\t\t\t\t\t\tsetModelValue(models[0], value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcase VormValueType.LIST:\n\t\t\t\t\t\t_.each(models, function ( model, index ) {\n\t\t\t\t\t\t\tsetModelValue(model, value[index]);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcase VormValueType.NAMED:\n\t\t\t\t\t\tconst modelsToChange = models.concat();\n\t\t\t\t\t\t_.each(value, function ( val, key ) {\n\t\t\t\t\t\t\tvar model = _.find(models, { $name: key });\n\t\t\t\t\t\t\tif(model) {\n\t\t\t\t\t\t\t\tsetModelValue(model, val);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_.pull(modelsToChange, model);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\t_.each(modelsToChange, function ( model ) {\n\t\t\t\t\t\t\tsetModelValue(model, undefined);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction getModelValue ( ) {\n\t\t\t\t\tlet value;\n\t\t\t\t\t\n\t\t\t\t\tswitch(valueType) {\n\t\t\t\t\t\tcase VormValueType.SINGLE:\n\t\t\t\t\t\tvalue = models[0] ? models[0].$modelValue : undefined;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcase VormValueType.LIST:\n\t\t\t\t\t\tvalue = _.pluck(models, '$modelValue');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcase VormValueType.NAMED:\n\t\t\t\t\t\tvalue = {};\n\t\t\t\t\t\t_.each(models, function ( model) {\n\t\t\t\t\t\t\tvalue[model.$name] = model.$modelValue;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction handleViewChange ( ) {\n\t\t\t\t\t// value changes from view\n\t\t\t\t\tvalueScope[name] = getModelValue();\n\t\t\t\t\tctrl.triggerViewChange();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfunction handleFormatterCall ( value ) {\n\t\t\t\t\t// value changes from model\n\t\t\t\t\tlet modelValue = getModelValue();\n\t\t\t\t\tvalueScope[name] = modelValue;\n\t\t\t\t\tctrl.triggerModelChange();\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tctrl.triggerModelChange = function ( ) {\n\t\t\t\t\telement.dispatchEvent(new VormEvent('modelchange', { name: name } ));\n\t\t\t\t\t_.invoke(modelChangeListeners, 'call', null, name);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.triggerViewChange = function ( ) {\n\t\t\t\t\telement.dispatchEvent(new VormEvent('viewchange', { name: name } ));\n\t\t\t\t\t_.invoke(viewChangeListeners, 'call', null, name);\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.getName = function ( ) {\n\t\t\t\t\treturn name;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.setName = function ( ) {\n\t\t\t\t\tname = arguments[0];\n\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\tctrl.addModel = function ( model ) {\n\t\t\t\t\tmodels.push(model);\n\t\t\t\t\tmodel.$viewChangeListeners.push(handleViewChange);\n\t\t\t\t\tmodel.$formatters.push(handleFormatterCall);\n\t\t\t\t\tvalueScope[name] = getModelValue();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.removeModel = function ( model ) {\n\t\t\t\t\t_.pull(models, model);\n\t\t\t\t\t_.pull(model.$viewChangeListeners, handleViewChange);\n\t\t\t\t\t_.pull(model.$formatters, handleFormatterCall);\n\t\t\t\t\tvalueScope[name] = getModelValue();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.getModels = function ( ) {\n\t\t\t\t\treturn models;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.getValue = function ( ) {\n\t\t\t\t\treturn valueScope[name];\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.getValueType = function ( ) {\n\t\t\t\t\treturn valueType;\t\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.setValueType = function ( type ) {\n\t\t\t\t\tif([ VormValueType.SINGLE, VormValueType.LIST, VormValueType.NAMED ].indexOf(type) === -1) {\n\t\t\t\t\t\tthrow new Error('Unsupported VormValueType: ' + VormValueType);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvalueType = type;\n\t\t\t\t\tvalueScope[name] = getDefaultValue();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.setValue = function ( value ) {\n\t\t\t\t\tvalueScope[name] = value;\n\t\t\t\t\tapplyValueToControls();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.setEmpty = function ( ) {\n\t\t\t\t\tvalueScope[name] = getDefaultValue();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.isRequired = function ( ) {\n\t\t\t\t\treturn required;\t\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.setRequired = function ( r ) {\n\t\t\t\t\trequired = !!r;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.isEmpty = function ( ) {\n\t\t\t\t\treturn models.every(function ( model ) {\n\t\t\t\t\t\treturn model.$isEmpty(model.$viewValue);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.setValueScope = function ( scope ) {\n\t\t\t\t\tlet val = valueScope[name];\n\t\t\t\t\tif(valueScope) {\n\t\t\t\t\t\tvalueScope.$destroy();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvalueScope = scope;\n\t\t\t\t\tvalueScope[name] = val;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.getValueScope = function ( ) {\n\t\t\t\t\treturn valueScope;\t\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tlet chain = _('valid invalid dirty pristine touched untouched required empty'.split(' '))\n\t\t\t\t\t\t.map(function ( key ) {\n\t\t\t\t\t\t\treturn prefix + key;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.zipObject()\n\t\t\t\t\t\t.mapValues(function ( value, key ) {\n\t\t\t\t\t\t\tlet m = key.substr(prefix.length);\n\t\t\t\t\t\t\treturn ctrl['is' + _.capitalize(m)]();\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\tctrl.getClassObj = function ( ) {\n\t\t\t\t\treturn chain.value();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.setEmpty();\n\t\t\t\t\n\t\t\t\tctrl.viewChangeListeners = viewChangeListeners;\n\t\t\t\tctrl.modelChangeListeners = modelChangeListeners;\n\t\t\t\n\t\t\t\t'valid invalid dirty pristine touched untouched'.split(' ').forEach(function ( type ) {\n\t\t\t\t\tconst capitalized = _.capitalize(type),\n\t\t\t\t\t\tgetName = 'is' + capitalized,\n\t\t\t\t\t\tpropertyName = '$' + type,\n\t\t\t\t\t\tsetName = 'set' + capitalized,\n\t\t\t\t\t\tmethod = [ 'valid', 'pristine', 'untouched' ].indexOf(type) !== -1 ? 'every' : 'some';\n\t\t\t\t\t\t\n\t\t\t\t\tctrl[getName] = function ( ) {\n\t\t\t\t\t\treturn models[method](function ( model ) {\n\t\t\t\t\t\t\treturn model[propertyName];\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tif(type !== 'valid' && type !== 'invalid') {\n\t\t\t\t\t\tctrl[setName] = function ( ) {\n\t\t\t\t\t\t\tvar outerArgs = arguments;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmodels.forEach(function ( model ) {\n\t\t\t\t\t\t\t\tmodel['$' + setName].apply(model, outerArgs);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tvalueScope[name] = getDefaultValue();\n\t\t\t\t\n\t\t\t\treturn ctrl;\n\t\t\t};\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular*/\r\n(function ( ) {\r\n\t\r\n\tangular.module('vorm')\r\n\t\t.factory('VormModelDelegate', [ function ( ) {\r\n\t\t\t\r\n\t\t\treturn function ( name ) {\r\n\t\t\t\t\r\n\t\t\t\tconst delegate = {};\r\n\t\t\t\tlet ngModel = null;\r\n\t\t\t\t\r\n\t\t\t\tdelegate.value = null;\r\n\t\t\t\t\r\n\t\t\t\tdelegate.getName = function ( ) {\r\n\t\t\t\t\treturn name;\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tdelegate.setNgModel = function ( model ) {\r\n\t\t\t\t\tngModel = model;\r\n\t\t\t\t\tif(ngModel) {\r\n\t\t\t\t\t\tngModel.$name = name;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tdelegate.unsetNgModel = function ( ) {\r\n\t\t\t\t\tngModel = null;\t\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tdelegate.getNgModel = function ( ) {\r\n\t\t\t\t\treturn ngModel;\t\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tdelegate.clearViewValue = function ( ) {\r\n\t\t\t\t\tngModel.$setViewValue(null);\r\n\t\t\t\t\tngModel.$render();\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tdelegate.getViewValue = function ( ) {\r\n\t\t\t\t\treturn ngModel ? ngModel.$viewValue : delegate.value;\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\treturn delegate;\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t\t\r\n\t\t}]);\r\n\t\r\n})();\r\n","/*global angular*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.factory('VormValueScope', [ '$rootScope', function ( $rootScope ) {\n\t\t\t\n\t\t\treturn function ( ) {\n\t\t\t\t\n\t\t\t\tconst scope = $rootScope.$new();\n\t\t\t\t\n\t\t\t\treturn scope;\n\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.constant('VormValueType',{\n\t\t\tSINGLE: 'single',\n\t\t\tLIST: 'list',\n\t\t\tNAMED: 'named'\n\t\t});\n\t\n})();\n","/*global angular*/\n(function ( ) {\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name ngModel\n\t * @module vorm\n\t * @description\n\t \n\t * This overloads the `ngModel` directive, and registers the `ngModelController`\n\t * with the `vormFieldController` and the `vormFormController` if they're there.\n\t \n\t * __Requires__: `ngModel`, `^?vormField`, `^?vormForm`\n\t */\n\t\n\tangular.module('vorm')\n\t\t.directive('ngModel', [ 'VormFieldCtrl', function ( VormFieldCtrl ) {\n\t\t\t\n\t\t\treturn {\n\t\t\t\trequire: [ 'ngModel', '^?vormField', '^?vormForm' ],\n\t\t\t\tcompile: function ( ) {\n\t\t\t\t\treturn function link ( scope, element, attrs, controllers ) {\n\t\t\t\t\t\n\t\t\t\t\t\tlet [ ngModel, vormField, vorm ] = controllers;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(vormField || vorm) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(!vormField) {\n\t\t\t\t\t\t\t\tvormField = new VormFieldCtrl(attrs.name || attrs.ngModel, element[0]);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(vorm) {\n\t\t\t\t\t\t\t\t\tvorm.addField(vormField);\n\t\t\t\t\t\t\t\t\tscope.$on('$destroy', function ( ) {\n\t\t\t\t\t\t\t\t\t\tvorm.removeField(vormField);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvormField.addModel(ngModel);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tscope.$on('$destroy', function ( ) {\n\t\t\t\t\t\t\t\tvormField.removeModel(ngModel);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular*/\n(function ( ) { \n\t\n\t/**\n\t * @ngdoc directive\n\t * @name vormChange\n\t * @module vorm\n\t * @description\n\t \n\t Evaluate the given expression when a value changes from the view.\n\t It listens to a viewchange event, which is dispatched from a \n\t `vormFieldController` and then bubbles upwards.\n\t */\n\t\n\tangular.module('vorm')\n\t\t.directive('vormChange', [ '$parse', function ( $parse ) {\n\t\t\t\n\t\t\treturn {\n\t\t\t\tlink: function ( scope, element, attrs ) {\n\t\t\t\t\t\n\t\t\t\t\tconst cb = $parse(attrs.vormChange);\n\t\t\t\t\t\n\t\t\t\t\tfunction handleChange ( event, name ) {\n\t\t\t\t\t\tcb(scope, {\n\t\t\t\t\t\t\t$event: event,\n\t\t\t\t\t\t\t$name: event.detail ? event.detail.name : name\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telement.bind('viewchange', handleChange);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t}]);\n})();\n","/*global angular,_*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.directive('vormControl', [ '$document', function ( $document ) { \n\t\t\t\n\t\t\tlet matchesFuncName = (function ( ) {\n\t\t\t\t\n\t\t\t\tlet element = $document[0].createElement('div');\n\t\t\t\t\n\t\t\t\treturn _([ '', 'ms', 'moz', 'webkit'])\n\t\t\t\t\t.map(function ( prefix ) {\n\t\t\t\t\t\treturn (prefix ? (prefix + 'MatchesSelector') : 'matches');\n\t\t\t\t\t})\n\t\t\t\t\t.find(function ( name ) {\n\t\t\t\t\t\treturn name in element;\n\t\t\t\t\t});\n\t\t\t})();\n\t\t\t\n\t\t\t\n\t\t\treturn {\n\t\t\t\trestrict: 'E',\n\t\t\t\trequire: [ 'vormControl', '^vormField', '^vormFieldConfig', '^vormFocusableList', '^vormFieldTemplate' ],\n\t\t\t\tcontroller: [ '$scope', '$element', '$attrs', function ( $scope, $element, $attrs ) {\n\t\t\t\t\t\n\t\t\t\t\tvar ctrl = this,\n\t\t\t\t\t\tvormField,\n\t\t\t\t\t\tvormFieldConfig,\n\t\t\t\t\t\tvormFocusableList,\n\t\t\t\t\t\tvormFieldTemplate,\n\t\t\t\t\t\tinputId = Math.random().toString(36).slice(2);\n\t\t\t\t\t\n\t\t\t\t\tctrl.link = function ( controllers ) {\n\t\t\t\t\t\tvormField = controllers[0];\n\t\t\t\t\t\tvormFieldConfig = controllers[1];\n\t\t\t\t\t\tvormFocusableList = controllers[2];\n\t\t\t\t\t\tvormFieldTemplate = controllers[3];\n\t\t\t\t\t\t\n\t\t\t\t\t\tctrl.invokeData = vormFieldConfig.invokeData;\n\t\t\t\t\t\tctrl.getData = vormFieldConfig.getData;\n\t\t\t\t\t\tctrl.getConfig = vormFieldConfig.getConfig;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvormFocusableList.addId(inputId);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvormFieldTemplate.getModelCompiler()($scope, function ( clonedElement ) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlet focusable,\n\t\t\t\t\t\t\t\tselector = 'input,keygen,meter,output,progress,select,textarea',\n\t\t\t\t\t\t\t\treplace = $element.find('vorm-control-replace'),\n\t\t\t\t\t\t\t\tdelegate = $scope.$eval($attrs.delegate);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treplace.replaceWith(clonedElement);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tclonedElement[0].className += ' ' + replace[0].className;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(clonedElement[0][matchesFuncName](selector)) {\n\t\t\t\t\t\t\t\tfocusable = clonedElement;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfocusable = angular.element(clonedElement[0].querySelector(selector));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfocusable.attr('id', ctrl.getInputId());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$scope.$$postDigest(function ( ) {\n\t\t\t\t\t\t\t\tdelegate.setNgModel(clonedElement.controller('ngModel'));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$scope.$on('$destroy', function ( ) {\n\t\t\t\t\t\t\t\tdelegate.unsetNgModel();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.isRequired = function ( ) {\n\t\t\t\t\t\treturn vormField && vormField.isRequired();\t\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getInputId = function ( ) {\n\t\t\t\t\t\treturn inputId;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getViewValue = function ( ) {\n\t\t\t\t\t\treturn $scope.$eval($attrs.delegate).getViewValue();\t\n\t\t\t\t\t};\n\t\t\t\t\t\t\t\n\t\t\t\t\tctrl.getDisplayMode = function ( ) {\n\t\t\t\t\t\treturn vormFieldConfig.getDisplayMode();\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tif(angular.version.minor >= 4) {\n\t\t\t\t\t\t// dynamic options throws an error in <=1.3.x\n\t\t\t\t\t\t// fixed in 1.4.x\n\t\t\t\t\t\t// https://github.com/angular/angular.js/pull/10639\n\t\t\t\t\t\tctrl.getOptions = function ( ) {\n\t\t\t\t\t\t\treturn ctrl.invokeData('options');\t\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tctrl.getOptions = (function ( ) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlet options;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn function ( ) {\n\t\t\t\t\t\t\t\tconst nwOpts = ctrl.invokeData('options');\n\t\t\t\t\t\t\t\tif(options !== nwOpts && !angular.equals(options,nwOpts)) {\n\t\t\t\t\t\t\t\t\toptions = nwOpts;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn options;\t\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$scope.$on('$destroy', function ( ) {\n\t\t\t\t\t\tvormFocusableList.removeId(inputId);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t}],\n\t\t\t\tcontrollerAs: 'vormControl',\n\t\t\t\tlink: function ( scope, element, attrs, controllers ) {\n\t\t\t\t\tcontrollers[0].link(controllers.slice(1));\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular,_*/\n(function ( ) {\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name vormControlList\n\t * @module vorm\n\t * @description\n\t \n\t This directives manages and displays the available controls.\n\t \n\t * __Requires__: `vormControlList`, `^vormFieldConfig`, `^?vormFocusableList`, `vormField`\n\t */\n\n\tangular.module('vorm')\n\t\t.directive('vormControlList', [  'VormModelDelegate', '$document', function ( VormModelDelegate, $document ) {\n\t\t\t\n\t\t\treturn {\n\t\t\t\trequire: [ 'vormControlList', '^vormFieldConfig', '^?vormFocusableList', '^vormField' ],\n\t\t\t\trestrict: 'E',\n\t\t\t\tcontroller: [ '$scope', function ( $scope ) {\n\t\t\t\t\t\n\t\t\t\t\tlet ctrl = this,\n\t\t\t\t\t\tdelegates = [],\n\t\t\t\t\t\tlimit = NaN,\n\t\t\t\t\t\tvormFieldConfig,\n\t\t\t\t\t\tvormFocusableList,\n\t\t\t\t\t\tvormField;\n\t\t\t\t\t\t\n\t\t\t\t\tfunction triggerAsyncViewChange ( callback ) {\n\t\t\t\t\t\tlet unwatch = $scope.$watchCollection(vormField.getModels, function ( ) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvormField.triggerViewChange();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tunwatch();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfunction setFocus ( ) {\n\t\t\t\t\t\tif(vormFocusableList) {\n\t\t\t\t\t\t\tlet id = vormFocusableList.getId(),\n\t\t\t\t\t\t\t\tel = $document[0].getElementById(id);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(el) {\n\t\t\t\t\t\t\t\tel.focus();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfunction createDelegate ( name ) {\n\t\t\t\t\t\tlet delegate,\n\t\t\t\t\t\t\tvalue;\n\t\t\t\t\t\t\n\t\t\t\t\t\tdelegate = new VormModelDelegate(name);\n\t\t\t\t\t\t\n\t\t\t\t\t\tswitch(vormField.getValueType()) {\n\t\t\t\t\t\t\tcase 'list':\n\t\t\t\t\t\t\tvalue = vormField.getValue()[delegates.length];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 'named':\n\t\t\t\t\t\t\tvalue = vormField.getValue()[name];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcase 'single':\n\t\t\t\t\t\t\tvalue = vormField.getValue();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tdelegate.value = value;\n\t\t\t\t\t\tdelegates.push(delegate);\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tctrl.link = function ( controllers ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tvormFieldConfig = controllers[0];\n\t\t\t\t\t\tvormFocusableList = controllers[1];\n\t\t\t\t\t\tvormField = controllers[2];\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.$watch(vormFieldConfig.getLimit, function ( limit ) {\n\t\t\t\t\t\t\tctrl.setLimit(limit);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.$watchCollection(function ( ) {\n\t\t\t\t\t\t\tlet keys,\n\t\t\t\t\t\t\t\tval = vormField.getValue();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tswitch(vormField.getValueType()) {\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tkeys = _.keys(val);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tcase 'single':\n\t\t\t\t\t\t\t\tkeys = null;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn keys;\n\t\t\t\t\t\t}, function ( keys ) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tdelegates = [];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(!keys) {\n\t\t\t\t\t\t\t\tcreateDelegate();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t_.each(keys, function ( key ) {\n\t\t\t\t\t\t\t\tcreateDelegate(key);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getDelegates = function ( ) {\n\t\t\t\t\t\treturn delegates;\t\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.clearDelegate = function ( delegate ) {\n\t\t\t\t\t\tdelegate.clearViewValue();\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getLimit = function ( ) {\n\t\t\t\t\t\treturn limit;\t\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.setLimit = function ( l ) {\n\t\t\t\t\t\tlimit = Number(l);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.reachedLimit = function ( ) {\n\t\t\t\t\t\treturn limit > 0 && delegates.length >= limit;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.isClearButtonVisible = function ( ) {\n\t\t\t\t\t\treturn vormField.getValueType() === 'list';\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.handleCreateClick = function ( ) {\n\t\t\t\t\t\tvormField.setValue(vormField.getValue().concat(null));\n\t\t\t\t\t\ttriggerAsyncViewChange(setFocus);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.handleClearClick = function ( delegate ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(delegates.length === 1) {\n\t\t\t\t\t\t\tdelegate.clearViewValue();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet value = vormField.getValue(),\n\t\t\t\t\t\t\t\tindex = _.find(vormField.getModels(), { model: delegate.getNgModel() });\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvalue.splice(index, 1);\n\t\t\t\t\t\t\tvormField.setValue(value);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttriggerAsyncViewChange(setFocus);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t}],\n\t\t\t\tcontrollerAs: 'vormControlList',\n\t\t\t\tlink: function ( scope, element, attrs, controllers ) {\n\t\t\t\t\t\n\t\t\t\t\tcontrollers.shift().link(controllers);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.directive('vormDelegateButton', [ function ( ) {\n\t\t\n\t\treturn {\n\t\t\trequire: [ 'vormDelegateButton', '^vormFieldConfig', '^vormControlList', '^vormField' ],\n\t\t\ttemplate: \n\t\t\t'<button class=\"vorm-delegate-button\" type=\"button\" ng-click=\"vormDelegateButton.handleClick()\" ng-disabled=\"vormDelegateButton.isDisabled()\" ng-show=\"vormDelegateButton.isVisible()\">' +\n\t\t\t\t'{{vormDelegateButton.getLabel()}}' + \n\t\t\t'</button>',\n\t\t\treplace: true,\n\t\t\tcontroller: [ function ( ) {\n\t\t\t\t\n\t\t\t\tlet ctrl = this,\n\t\t\t\t\tvormFieldConfig,\n\t\t\t\t\tvormControlList,\n\t\t\t\t\tvormField;\n\t\t\t\t\n\t\t\t\tctrl.link = function ( controllers ) {\n\t\t\t\t\tvormFieldConfig = controllers[0];\n\t\t\t\t\tvormControlList = controllers[1];\n\t\t\t\t\tvormField = controllers[2];\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.handleClick = function ( ) {\n\t\t\t\t\tvormControlList.handleCreateClick();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.isDisabled = function ( ) {\n\t\t\t\t\treturn vormControlList.reachedLimit();\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.isVisible = function ( ) {\n\t\t\t\t\treturn vormField.getValueType() === 'list';\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tctrl.getLabel = function ( ) {\n\t\t\t\t\tlet config = vormFieldConfig.getConfig(),\n\t\t\t\t\t\ttypeOptions = config ? config.valueType : null,\n\t\t\t\t\t\taddLabel = typeOptions && typeOptions.addLabel ? vormFieldConfig.invoke(typeOptions.addLabel) : '';\n\t\t\t\t\t\n\t\t\t\t\treturn addLabel;\n\t\t\t\t};\n\t\t\t\t\n\t\t\t}],\n\t\t\tlink: function ( scope, element, attrs, controllers ) {\n\t\t\t\t\n\t\t\t\tcontrollers.shift().link(controllers);\n\t\t\t\t\n\t\t\t},\n\t\t\tcontrollerAs: 'vormDelegateButton'\n\t\t};\n\t\t\n\t}]);\n\t\n})();\n","/*global angular*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.directive('vormDisplay', [ 'vormTemplateService', function ( vormTemplateService ) {\n\t\t\t\n\t\t\treturn {\n\t\t\t\trestrict: 'E',\n\t\t\t\trequire: [ 'vormDisplay', '^vormControl', '^vormFieldConfig' ],\n\t\t\t\tcontroller: [ '$scope', '$element', function ( $scope, $element ) {\n\t\t\t\t\t\n\t\t\t\t\tlet ctrl = this,\n\t\t\t\t\t\tvormControl,\n\t\t\t\t\t\tvormFieldConfig;\n\t\t\t\t\t\n\t\t\t\t\tctrl.link = function ( controllers ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet template,\n\t\t\t\t\t\t\tcompiler,\n\t\t\t\t\t\t\tconfig;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvormControl = controllers[0];\n\t\t\t\t\t\tvormFieldConfig = controllers[1];\n\t\t\t\t\t\t\n\t\t\t\t\t\tconfig = vormFieldConfig.getConfig();\n\t\t\t\t\t\t\n\t\t\t\t\t\ttemplate = config.template ? config.template.display : null;\n\t\t\t\t\t\t\n\t\t\t\t\t\tcompiler = vormTemplateService.getDisplayCompiler(config.type, template);\n\t\t\t\t\t\t\n\t\t\t\t\t\tcompiler($scope, function ( clonedElement ) {\n\t\t\t\t\t\t\t$element.append(clonedElement);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tctrl.getViewValue = vormControl.getViewValue;\n\t\t\t\t\t\tctrl.getModelValue = vormControl.getModelValue;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}],\n\t\t\t\tcontrollerAs: 'vormDisplay',\n\t\t\t\tlink: function ( scope, element, attrs, controllers ) {\n\t\t\t\t\tcontrollers.shift().link(controllers);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.directive('vormField', [ 'VormFieldCtrl', function ( VormFieldCtrl ) {\n\t\t\t\n\t\t\treturn {\n\t\t\t\tscope: true,\n\t\t\t\trequire: [ 'vormField', '^?vormForm' ],\n\t\t\t\tcontroller: [ '$scope', '$element', '$attrs', function ( $scope, $element, $attrs ) {\n\t\t\t\t\t\n\t\t\t\t\tconst name = $scope.$eval($attrs.vormField) || $attrs.name || $attrs.ngModel,\n\t\t\t\t\t\tctrl = this;\n\t\t\t\t\t\t\n\t\t\t\t\tangular.extend(ctrl, new VormFieldCtrl(name, $element[0]));\n\t\t\t\t\t\n\t\t\t\t\tctrl.link = function ( controllers ) {\n\t\t\t\t\t\tconst [ vorm ] = controllers;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(vorm) {\n\t\t\t\t\t\t\tvorm.addField(ctrl);\n\t\t\t\t\t\t\t$scope.$on('$destroy', function ( ) {\n\t\t\t\t\t\t\t\tvorm.removeField(ctrl);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t}],\n\t\t\t\tcontrollerAs: 'vormField',\n\t\t\t\tlink: function ( scope, element, attrs, controllers ) {\n\t\t\t\t\tcontrollers.shift().link(controllers);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular,_*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.directive('vormFieldConfig', [ 'vormInvoke', function ( vormInvoke ) {\n\t\t\t\n\t\t\treturn {\n\t\t\t\trequire: [ 'vormFieldConfig', 'vormField', '^?vormForm' ],\n\t\t\t\tcontroller: [ '$scope', '$attrs', function ( $scope, $attrs ) {\n\t\t\t\t\t\n\t\t\t\t\tlet ctrl = this,\n\t\t\t\t\t\tconfig = $scope.$eval($attrs.vormFieldConfig),\n\t\t\t\t\t\tvormField,\n\t\t\t\t\t\tvormForm;\n\t\t\t\t\t\t\n\t\t\t\t\tfunction getValues ( ) {\n\t\t\t\t\t\tlet values;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(vormForm) {\n\t\t\t\t\t\t\tvalues = vormForm.getValues();\n\t\t\t\t\t\t} else if(vormField) {\n\t\t\t\t\t\t\tvalues = {};\n\t\t\t\t\t\t\tvalues[vormField.getName()] = vormField.getValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn values;\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tctrl.link = function ( controllers ) {\n\t\t\t\t\t\tvormField = controllers[0];\n\t\t\t\t\t\tvormForm = controllers[1];\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tvormField.setName(config.name);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(config.valueType !== undefined) {\n\t\t\t\t\t\t\tif(typeof config.valueType === 'string') {\n\t\t\t\t\t\t\t\tvormField.setValueType(config.valueType);\n\t\t\t\t\t\t\t} else if(config.valueType.type !== undefined) {\n\t\t\t\t\t\t\t\tvormField.setValueType(config.valueType.type);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(_.isArray(config.required) || typeof config.required === 'function') {\n\t\t\t\t\t\t\t$scope.$watch(function ( ) {\n\t\t\t\t\t\t\t\t\treturn ctrl.invoke(config.required);\n\t\t\t\t\t\t\t\t}, function ( isRequired ) {\n\t\t\t\t\t\t\t\tvormField.setRequired(!!isRequired);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvormField.setRequired(config.required || false);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(config.defaults) {\n\t\t\t\t\t\t\tvormField.setValue(ctrl.invoke(config.defaults));\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.invoke = function ( invokable ) {\n\t\t\t\t\t\treturn vormInvoke(invokable, {\n\t\t\t\t\t\t\t$values: getValues()\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.invokeExpr = function ( invokable ) {\n\t\t\t\t\t\treturn vormInvoke.expr(invokable, {\n\t\t\t\t\t\t\t$values: getValues()\n\t\t\t\t\t\t}, vormField.getValueScope());\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getConfig = function ( ) {\n\t\t\t\t\t\treturn config;\t\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.invokeData = function ( key ) {\n\t\t\t\t\t\treturn ctrl.invoke(config.data[key]);\t\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getLimit = function ( ) {\n\t\t\t\t\t\tvar limit = 1;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(vormField.getValueType() === 'list') {\n\t\t\t\t\t\t\tlimit = -1;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(config.valueType && config.valueType.limit !== undefined) {\n\t\t\t\t\t\t\t\tlimit = ctrl.invoke(config.valueType.limit);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn limit;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getDisplayMode = function ( ) {\n\t\t\t\t\t\treturn ctrl.invokeExpr(config.disabled) ? 'display' : 'edit';\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t}],\n\t\t\t\tcontrollerAs: 'vormFieldConfig',\n\t\t\t\tlink: function ( scope, element, attrs, controllers ) {\n\t\t\t\t\tcontrollers.shift().link(controllers);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t};\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular,_*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.directive('vormFieldTemplate', [ 'vormTemplateService', function ( vormTemplateService ) {\n\t\t\t\n\t\t\tlet wrapperEl = angular.element(vormTemplateService.getDefaultTemplate());\n\t\t\t\n\t\t\tangular.element(wrapperEl[0].querySelectorAll('vorm-replace')).replaceWith(vormTemplateService.getDefaultControlTemplate());\n\t\t\t\n\t\t\twrapperEl.attr('vorm-field-config', 'vormFieldTemplate.getConfig()');\n\t\t\twrapperEl.attr('vorm-focusable-list', '');\n\t\t\t\t\n\t\t\tconst template = wrapperEl[0].outerHTML;\n\t\t\t\n\t\t\treturn {\n\t\t\t\tscope: true,\n\t\t\t\trestrict: 'E',\n\t\t\t\ttemplate: template,\n\t\t\t\treplace: true,\n\t\t\t\tcontroller: [ '$scope', '$attrs', '$element', function ( $scope, $attrs, $element ) {\n\t\t\t\t\t\n\t\t\t\t\tlet ctrl = this,\n\t\t\t\t\t\tconfig = $scope.$eval($attrs.config) || {},\n\t\t\t\t\t\tcompiler;\n\t\t\t\t\t\n\t\t\t\t\tconfig = _.defaults(angular.copy(config), { \n\t\t\t\t\t\tname: $attrs.name,\n\t\t\t\t\t\ttype: $attrs.type,\n\t\t\t\t\t\tlabel: $attrs.label,\n\t\t\t\t\t\ttemplate: $scope.$eval($attrs.template),\n\t\t\t\t\t\trequired: $scope.$eval($attrs.required),\n\t\t\t\t\t\tdata: $scope.$eval($attrs.data) || {}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tif(!config.name || !config.type) {\n\t\t\t\t\t\tthrow new Error('Missing one of required arguments: name, type ');\n\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tcompiler = vormTemplateService.getModelCompiler(config.type, config.modelTemplate);\n\t\t\t\t\t\n\t\t\t\t\t$element.attr('vorm-field', config.name);\n\t\t\t\t\t\n\t\t\t\t\tctrl.getConfig = function ( ) {\n\t\t\t\t\t\treturn config;\t\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getModelCompiler = function ( ) {\n\t\t\t\t\t\treturn compiler;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t}],\n\t\t\t\tcontrollerAs: 'vormFieldTemplate'\n\t\t\t};\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.directive('vormFieldWrapper', [ 'vormTemplateService', function ( vormTemplateService ) {\n\t\t\t\n\t\t\tlet wrapped = angular.element(vormTemplateService.getDefaultTemplate());\n\t\t\t\n\t\t\twrapped.find('vorm-replace').append('<ng-transclude></ng-transclude>');\n\t\t\twrapped.attr('vorm-field-config', 'vormFieldWrapper.getConfig()');\n\t\t\twrapped.attr('vorm-focusable-list', '');\n\t\t\t\n\t\t\tconst template = wrapped[0].outerHTML;\n\t\t\t\n\t\t\treturn {\n\t\t\t\trestrict: 'A',\n\t\t\t\ttransclude: true,\n\t\t\t\ttemplate: template,\n\t\t\t\treplace: true,\n\t\t\t\tcontroller: [ '$attrs', function ( $attrs ) {\n\t\t\t\t\t\n\t\t\t\t\tvar ctrl = this,\t\n\t\t\t\t\t\tconfig = {\n\t\t\t\t\t\t\tname: $attrs.name,\n\t\t\t\t\t\t\tlabel: $attrs.label\n\t\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getConfig = function ( ) {\n\t\t\t\t\t\treturn config;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t}],\n\t\t\t\tcontrollerAs: 'vormFieldWrapper'\n\t\t\t};\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.directive('vormFieldset', [ 'vormInvoke', function ( vormInvoke ) {\n\t\t\t\n\t\t\treturn {\n\t\t\t\trestrict: 'E',\n\t\t\t\trequire: [ 'vormFieldset', '^?vormForm' ],\n\t\t\t\ttemplate: `\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<vorm-field-template config=\"field\" ng-repeat=\"field in vormFieldset.getFields() | filter:vormFieldset.isVisible:field\">\n\t\t\t\t\t\t</vorm-field-template>\n\t\t\t\t\t</fieldset>\n\t\t\t\t`,\n\t\t\t\treplace: true,\n\t\t\t\tcontroller: [ '$scope', '$attrs', function ( $scope, $attrs ) {\n\t\t\t\t\t\n\t\t\t\t\tlet ctrl = this,\n\t\t\t\t\t\tvormForm,\n\t\t\t\t\t\tvalueScope;\n\t\t\t\t\t\n\t\t\t\t\tfunction getValues ( ) {\n\t\t\t\t\t\tlet vals = {};\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(vormForm) {\n\t\t\t\t\t\t\tvals = vormForm.getValues();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn vals;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tctrl.link = function ( controllers ) {\n\t\t\t\t\t\tvormForm = controllers[0];\n\t\t\t\t\t\tif(vormForm) {\n\t\t\t\t\t\t\tvalueScope = vormForm.getValueScope();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getFields = function ( ) {\n\t\t\t\t\t\treturn $scope.$eval($attrs.fields);\t\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.isVisible = function ( field ) {\n\t\t\t\t\t\treturn field.when === null || field.when === undefined ? true : !!vormInvoke.expr(field.when, { $values: getValues() }, valueScope);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t}],\n\t\t\t\tcontrollerAs: 'vormFieldset',\n\t\t\t\tlink: function ( scope, element, attrs, controllers  ) {\n\t\t\t\t\tcontrollers.shift().link(controllers);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular,_*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.directive('vormFocusableList', [ function ( ) {\n\t\t\t\n\t\t\treturn {\n\t\t\t\tcontroller: [ function ( ) {\n\t\t\t\t\t\n\t\t\t\t\tlet ctrl = this,\n\t\t\t\t\t\tids = [];\n\t\t\t\t\t\n\t\t\t\t\tctrl.addId = function ( id ) {\n\t\t\t\t\t\tids.push(id);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.removeId = function ( id ) {\n\t\t\t\t\t\t_.pull(ids, id);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getId = function ( ) {\n\t\t\t\t\t\treturn ids[ids.length-1];\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t}]\n\t\t\t};\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular,_*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.directive('vormForm', [ 'VormValueScope', function ( VormValueScope ) { \n\t\t\t\n\t\t\treturn {\n\t\t\t\tscope: true,\n\t\t\t\trequire: [ 'form' ],\n\t\t\t\tcontroller: [ '$element', function ( $element ) {\n\t\t\t\t\t\n\t\t\t\t\tconst ctrl = this,\n\t\t\t\t\t\tfields = [],\n\t\t\t\t\t\tchangeListeners = [],\n\t\t\t\t\t\tsubmitListeners = [],\n\t\t\t\t\t\tvalueScope = new VormValueScope();\n\t\t\t\t\t\t\n\t\t\t\t\tfunction handleChange ( ) {\n\t\t\t\t\t\tconst outerArgs = arguments;\n\t\t\t\t\t\t\n\t\t\t\t\t\t_.each(changeListeners, function ( listener ) {\n\t\t\t\t\t\t\tlistener.apply(ctrl, outerArgs);\t\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfunction getFieldByName ( name ) {\n\t\t\t\t\t\treturn _.find(fields, function ( field ) {\n\t\t\t\t\t\t\treturn field.getName() === name;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tctrl.addField = function ( field ) {\n\t\t\t\t\t\tfields.push(field);\n\t\t\t\t\t\tfield.viewChangeListeners.push(handleChange);\n\t\t\t\t\t\tfield.setValueScope(valueScope);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.removeField = function ( field ) {\n\t\t\t\t\t\t_.pull(fields, field);\n\t\t\t\t\t\t_.pull(field.viewChangeListeners, handleChange);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getFields = function ( ) {\n\t\t\t\t\t\treturn fields;\t\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getValues = function ( ) {\n\t\t\t\t\t\tlet values = _(fields)\n\t\t\t\t\t\t\t.indexBy(function ( field ) {\n\t\t\t\t\t\t\t\treturn field.getName();\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.mapValues(function ( field ) {\n\t\t\t\t\t\t\t\treturn field.getValue();\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.value();\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn values;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getValue = function ( name ) {\n\t\t\t\t\t\treturn getFieldByName(name).getValue();\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.setValue = function ( name, value ) {\n\t\t\t\t\t\tgetFieldByName(name).setValue(value);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getValueScope = function ( ) {\n\t\t\t\t\t\treturn valueScope;\t\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.changeListeners = changeListeners;\n\t\t\t\t\tctrl.submitListeners = submitListeners;\n\t\t\t\t\t\n\t\t\t\t\t'valid invalid dirty pristine touched untouched'.split(' ').forEach(function ( type ) {\n\t\t\t\t\t\tconst capitalized = type.substr(0,1).toUpperCase() + type.substr(1),\n\t\t\t\t\t\t\tgetName = 'is' + capitalized,\n\t\t\t\t\t\t\tsetName = 'set' + capitalized,\n\t\t\t\t\t\t\tmethod = [ 'valid', 'pristine', 'untouched' ].indexOf(type) !== -1 ? 'every' : 'some';\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tctrl[getName] = function ( ) {\n\t\t\t\t\t\t\treturn fields[method](function ( field ) {\n\t\t\t\t\t\t\t\treturn field[getName]();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!(type === 'valid' || type === 'invalid')) {\n\t\t\t\t\t\t\tctrl[setName] = function ( ) {\n\t\t\t\t\t\t\t\tconst outerArgs = arguments;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tfields.forEach(function ( field ) {\n\t\t\t\t\t\t\t\t\tfield[setName].apply(field, outerArgs);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t$element.bind('submit', function ( ) {\n\t\t\t\t\t\t_.invoke(submitListeners, 'call', null, ctrl.getValues());\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\treturn ctrl;\n\t\t\t\t\t\n\t\t\t\t}],\n\t\t\t\tcontrollerAs: 'vormForm'\n\t\t\t};\n\t\t\t\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular,_*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.factory('vormInvoke', [ '$injector', '$parse', function ( $injector, $parse ) {\n\t\t\t\n\t\t\tfunction invoke ( invokable, locals ) {\n\t\t\t\tlet value;\n\t\t\t\t\n\t\t\t\tif(!invokable) {\n\t\t\t\t\treturn invokable;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif((_.isArray(invokable) && typeof _.last(invokable) === 'function') || invokable.$inject !== undefined) {\n\t\t\t\t\tvalue = $injector.invoke(invokable, null, locals ? angular.copy(locals) : null);\n\t\t\t\t} else if(typeof invokable === 'function') {\n\t\t\t\t\tvalue = invokable();\n\t\t\t\t} else {\n\t\t\t\t\tvalue = invokable;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\t\n\t\t\tlet invoker = function ( invokable, locals ) {\n\t\t\t\treturn invoke(invokable,locals);\n\t\t\t};\n\t\t\t\n\t\t\tinvoker.expr = function ( invokable, locals, scope ) {\n\t\t\t\tlet value;\n\t\t\t\tif(typeof invokable === 'string') {\n\t\t\t\t\tvalue = $parse(invokable)(scope, locals);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = invoke(invokable, locals);\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t};\n\t\t\t\n\t\t\treturn invoker;\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.directive('vormLabel', [ function ( ) {\n\t\t\t\n\t\t\treturn {\n\t\t\t\trequire: [ 'vormLabel', '^vormFieldConfig', '^vormFocusableList' ],\n\t\t\t\ttemplate: '<label class=\"vorm-field-label\">{{vormLabel.getLabel()}}</label>',\n\t\t\t\treplace: true,\n\t\t\t\tcontroller: [ '$scope', '$element', function ( $scope, $element ) {\n\t\t\t\t\t\n\t\t\t\t\tlet ctrl = this,\n\t\t\t\t\t\tvormFieldConfig,\n\t\t\t\t\t\tvormFocusableList;\n\t\t\t\t\t\n\t\t\t\t\tctrl.link = function ( controllers ) {\n\t\t\t\t\t\tvormFieldConfig = controllers[0];\n\t\t\t\t\t\tvormFocusableList = controllers[1];\n\t\t\t\t\t\t\n\t\t\t\t\t\t$scope.$watch(vormFocusableList.getId, function ( inputId ) {\n\t\t\t\t\t\t\t$element.attr('for', inputId);\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tctrl.getLabel = function ( ) {\n\t\t\t\t\t\treturn vormFieldConfig.invoke(vormFieldConfig.getConfig().label);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t}],\n\t\t\t\tcontrollerAs: 'vormLabel',\n\t\t\t\tlink: function ( scope, element, attrs, controllers ) {\n\t\t\t\t\t\n\t\t\t\t\tcontrollers[0].link(controllers.slice(1));\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular*/\n(function ( ) { \n\t\n\tangular.module('vorm')\n\t\t.directive('vormSubmit', [ '$parse', function ( $parse ) {\n\t\t\t\n\t\t\treturn {\n\t\t\t\trequire: [ 'vormForm' ],\n\t\t\t\tlink: function ( scope, element, attrs, controllers ) {\n\t\t\t\t\t\n\t\t\t\t\tconst [ vorm ] = controllers;\n\t\t\t\t\tlet cb;\n\t\t\t\t\t\n\t\t\t\t\tfunction handleSubmit ( ) {\n\t\t\t\t\t\tcb(scope, {\n\t\t\t\t\t\t\t$values: vorm.getValues()\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcb = $parse(attrs.vormSubmit);\n\t\t\t\t\t\n\t\t\t\t\telement.bind('submit', handleSubmit);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t}]);\n})();\n","/*global angular,_*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.provider('vormTemplateService', [ function ( ) {\n\t\t\t\n\t\t\tlet wrapperTemplate,\n\t\t\t\tcontrolTemplate,\n\t\t\t\tcompilers = { model: {}, display: {} },\n\t\t\t\ttemplates = { model: {}, display: { null: angular.element('<span>{{vormDisplay.getViewValue()}}</span>') } };\n\t\t\t\t\n\t\t\tconst vormTemplateService = {};\n\t\t\t\n\t\t\twrapperTemplate = \n\t\t\t\t'<div ng-class=\"vormField.getClassObj()\">' + \n\t\t\t\t\t'<vorm-label></vorm-label>' + \n\t\t\t\t\t'<vorm-replace></vorm-replace>' +\n\t\t\t\t'</div>';\n\t\t\t\t\n\t\t\tcontrolTemplate = \n\t\t\t\t'<vorm-control-list>' + \n\t\t\t\t\t'<vorm-control ng-repeat=\"delegate in vormControlList.getDelegates()\" delegate=\"delegate\">' + \n\t\t\t\t\t\t'<vorm-edit ng-show=\"vormControl.getDisplayMode()===\\'edit\\'\">' +\n\t\t\t\t\t\t\t'<vorm-control-replace></vorm-control-replace>' + \n\t\t\t\t\t\t\t'<button class=\"vorm-control-clear-button\" type=\"button\" ng-click=\"vormControlList.handleClearClick(delegate)\" ng-show=\"vormControlList.isClearButtonVisible()\">x</button>' + \n\t\t\t\t\t\t'</vorm-edit>' +\n\t\t\t\t\t\t'<vorm-display ng-show=\"vormControl.getDisplayMode()===\\'display\\'\"></vorm-display>' + \n\t\t\t\t\t'</vorm-control>' + \n\t\t\t\t\t'<vorm-delegate-button>' + \n\t\t\t\t\t'</vorm-delegate-button>' +\n\t\t\t\t'</vorm-control-list>';\n\t\t\t\n\t\t\tfunction modifyModelTemplates ( processor ) {\n\t\t\t\ttemplates.model = _.mapValues(templates.model, function ( template, type ) {\n\t\t\t\t\treturn processor(template, type);\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\tfunction modifyDisplayTemplates ( processor ) {\n\t\t\t\ttemplates.display = _.mapValues(templates.display, function ( template, type ) {\n\t\t\t\t\treturn processor(template, type);\n\t\t\t\t});\t\n\t\t\t}\n\t\t\t\n\t\t\tfunction modifyTemplate ( processor ) {\n\t\t\t\tconst processedEl = processor(angular.element(wrapperTemplate));\n\t\t\t\tprocessedEl.attr('vorm-field', '');\n\t\t\t\t\n\t\t\t\tprocessedEl.find('vorm-control').attr('limit', 'vormFieldConfig.getLimit()');\n\t\t\t\t\n\t\t\t\twrapperTemplate = processedEl[0].outerHTML;\n\t\t\t}\n\t\t\t\n\t\t\tfunction modifyControlTemplate ( processor ) {\n\t\t\t\tconst wrapper = angular.element('<p></p>');\n\t\t\t\twrapper.append(processor(angular.element(controlTemplate)));\n\t\t\t\tcontrolTemplate = wrapper[0].innerHTML;\n\t\t\t}\n\t\t\t\n\t\t\tfunction registerType ( type, modelTemplate, displayTemplate ) {\n\t\t\t\ttemplates.model[type] = modelTemplate;\n\t\t\t\tif(displayTemplate) {\n\t\t\t\t\ttemplates.display[type] = displayTemplate;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tmodifyTemplate(function ( ) {\n\t\t\t\treturn angular.element(wrapperTemplate);\t\n\t\t\t});\n\t\t\t\n\t\t\tmodifyControlTemplate(function ( ) {\n\t\t\t\treturn angular.element(controlTemplate);\n\t\t\t});\n\t\t\t\n\t\t\t\n\t\t\treturn {\n\t\t\t\t$get: [ '$compile', function ( $compile ) {\n\t\t\t\t\t\n\t\t\t\t\tfunction getCompiler ( type, controlType, template ) {\n\t\t\t\t\t\tlet compiler,\n\t\t\t\t\t\t\tpool = compilers[type];\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif(template) {\n\t\t\t\t\t\t\tcompiler = $compile(template);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcompiler = pool[controlType];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!compiler && type === 'display') {\n\t\t\t\t\t\t\tcompiler = getCompiler(type, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!compiler) {\n\t\t\t\t\t\t\tthrow new Error(`${_.capitalize(type)} template for ${controlType} not found`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn compiler;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvormTemplateService.getDefaultTemplate = function ( ) {\n\t\t\t\t\t\treturn wrapperTemplate;\t\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tvormTemplateService.getDefaultControlTemplate = function ( ) {\n\t\t\t\t\t\treturn controlTemplate;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tvormTemplateService.getModelCompiler = function ( type, template ) {\n\t\t\t\t\t\treturn getCompiler('model', type, template);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tvormTemplateService.getDisplayCompiler = function ( type, template ) {\n\t\t\t\t\t\treturn getCompiler('display', type, template);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tcompilers.model = _.mapValues(templates.model, function ( el ) {\n\t\t\t\t\t\tlet modelEl;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t_.some(el, function ( element ) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlet childEl;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(element.hasAttribute('ng-model')) {\n\t\t\t\t\t\t\t\tmodelEl = angular.element(element);\n\t\t\t\t\t\t\t} else if((childEl = element.querySelector('[ng-model]'))) {\n\t\t\t\t\t\t\t\tmodelEl = angular.element(childEl);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn !!modelEl;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tif(!modelEl) {\n\t\t\t\t\t\t\tmodelEl = el;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\tmodelEl.attr('ng-model', 'delegate.value');\n\t\t\t\t\t\tmodelEl.attr('name', '{{delegate.getName()}}');\n\t\t\t\t\t\tmodelEl.attr('ng-required', 'vormControl.isRequired()');\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn $compile(el);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tcompilers.display = _.mapValues(templates.display, function ( el ) {\n\t\t\t\t\t\treturn $compile(el);\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\treturn vormTemplateService;\n\t\t\t\t\t\n\t\t\t\t}],\n\t\t\t\tmodifyModelTemplates: modifyModelTemplates,\n\t\t\t\tmodifyDisplayTemplates: modifyDisplayTemplates,\n\t\t\t\tmodifyControlTemplate: modifyControlTemplate,\n\t\t\t\tmodifyTemplate: modifyTemplate,\n\t\t\t\tregisterType: registerType\n\t\t\t};\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular,_*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.config([ 'vormTemplateServiceProvider', function ( vormTemplateServiceProvider ) {\n\t\t\t\n\t\t\tconst templates = \n\t\t\t\t_('date datetime datetime-local email month number password search tel text time url week checkbox'.split(' '))\n\t\t\t\t\t.zipObject()\n\t\t\t\t\t.mapValues(function ( value, key ) {\n\t\t\t\t\t\tvar placeholder = _.includes('text search tel url email number password'.split(' '), key) ?\n\t\t\t\t\t\t\t`placeholder=\"{{vormControl.invokeData('placeholder')}}\"`\n\t\t\t\t\t\t\t: '',\n\t\t\t\t\t\t\ttpl = `<input type=\"${key}\" ${placeholder} ng-model/>`;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(key === 'checkbox') {\n\t\t\t\t\t\t\ttpl = \n\t\t\t\t\t\t\t\t'<label for=\"{{vormControl.getInputId()}}\">' + \n\t\t\t\t\t\t\t\t\ttpl + \n\t\t\t\t\t\t\t\t\t'{{vormControl.invokeData(\"checkboxLabel\")}}' + \n\t\t\t\t\t\t\t\t'</label>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn tpl;\n\t\t\t\t\t})\n\t\t\t\t\t.value();\n\t\t\t\t\t\n\t\t\tfor(let type in templates) {\n\t\t\t\tvormTemplateServiceProvider.registerType(type, angular.element(templates[type]));\n\t\t\t}\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.config([ 'vormTemplateServiceProvider', function ( vormTemplateServiceProvider ) {\n\t\t\t\n\t\t\tconst el = angular.element(\n\t\t\t\t'<div class=\"vorm-radio-group\">' + \n\t\t\t\t\t'<label ng-repeat=\"option in vormControl.getOptions()\">' +\n\t\t\t\t\t\t'<input type=\"radio\" ng-model name=\"{{::vormField.getName()}}\" value=\"{{::option.value}}\"/>' + \n\t\t\t\t\t\t'{{::option.label}}' + \n\t\t\t\t\t'</label>' +\n\t\t\t\t'</div>'\n\t\t\t);\n\t\t\t\n\t\t\tvormTemplateServiceProvider.registerType('radio', el);\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.config([ 'vormTemplateServiceProvider', function ( vormTemplateServiceProvider ) {\n\t\t\t\n\t\t\tconst el = angular.element(`<select ng-options=\"option.value as option.label for option in vormControl.getOptions()\"><option value=\"\" ng-show=\"!!vormControl.invokeData('notSelectedLabel')\">{{vormControl.invokeData('notSelectedLabel')}}</option></select>`);\n\t\t\t\n\t\t\tvormTemplateServiceProvider.registerType('select', el);\n\t\t\t\n\t\t}]);\n\t\n})();\n","/*global angular*/\n(function ( ) {\n\t\n\tangular.module('vorm')\n\t\t.config([ 'vormTemplateServiceProvider', function ( vormTemplateServiceProvider ) {\n\t\t\t\n\t\t\tconst el = angular.element(`<textarea placeholder=\"{{vormControl.invokeData('placeholder')}}\"></textarea>`);\n\t\t\t\n\t\t\tvormTemplateServiceProvider.registerType('textarea', el);\n\t\t\t\n\t\t}]);\n\t\n})();\n"],"sourceRoot":"/source/"}