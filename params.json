{"name":"Vorm","tagline":"Write your Angular forms in JSON and HTML, use the same API","body":"![Tests passing](https://travis-ci.org/plestik/vorm.svg?branch=master)\r\n# vorm\r\nWrite your Angular forms in JSON and HTML, use the same API.\r\n\r\n## What does vorm do?\r\n\r\nVorm is an Angular module for generating (via JSON/HTML) and decorating (HTML) forms and form controls. No matter how you write your forms, the same API is available. \r\n\r\n## What makes vorm different from other libraries?\r\n\r\nVorm has two features which as far as I can tell set it apart: \r\n\r\n#### 1. Use both JSON and HTML for generating or decorating your forms\r\n\r\nThere are three ways to create a form:\r\n- Using the `vorm-fieldset` directive and passing it an array of field configuration objects.\r\n- Using the `vorm-fieldset-template` directive and specifying a name, type and label (and other optional attributes).\r\n- Using the `vorm-field-wrapper` directive to decorate existing controls. The directive will unpack its contents and wrap it with the default wrapper template.\r\n\r\n#### 2. Multiple controls per field are supported out of the box\r\n\r\nYou can add any number of controls, of any type, to a `vorm-field`, and it will resolve the values for you in a smart way. It makes two things easy: nested (mini-)forms and lists of controls. The latter is especially helpful if the user needs to provide a list for a certain property instead of just one value (for instance, a list of airports the user wishes to travel from). This is the main reason this library exists.\r\n\r\n## What else does it do?\r\n* Customize/override wrap and control templates\r\n* Dynamic data for controls via _invokables_ (primitives, booleans or (annotated) functions)\r\n* Various HTML form controls supported by default (`input`, `select`, `textarea` and all their variations)\r\n* Easily add any custom control that depends on `ngModel`\r\n\r\n## How do I get started?\r\n\r\nFor now, read the source code, [ping me on Twitter](https://twitter.com/plestik), or check out the examples:\r\n* [01 - Generate a simple form with JSON](http://plestik.github.io/vorm/examples/01/)\r\n* [02 - Generate a simple form with HTML](http://plestik.github.io/vorm/examples/02/)\r\n* [03 - Using a custom theme (in this case, Angular Material)](http://plestik.github.io/vorm/examples/03/)\r\n* [04 - Allow multiple controls per field](http://plestik.github.io/vorm/examples/04/)\r\n\r\nMore to come!\r\n\r\n### Things to do before the first release:\r\n- [ ] Support all basic input types\r\n- [ ] Make sure `vorm-field-wrapper` works with `compile` & `.replaceWith` instead of transclusion\r\n- [ ] Write up examples for value types `list` and `object`\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}